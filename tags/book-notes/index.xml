<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Book Notes on 三十重围</title>
    <link>http://www.heguangnan.com/tags/book-notes/</link>
    <description>Recent content in Book Notes on 三十重围</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-EN</language>
    <lastBuildDate>Tue, 26 Jul 2016 09:50:57 +0800</lastBuildDate>
    
	<atom:link href="http://www.heguangnan.com/tags/book-notes/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Book Review: Thinking in Java</title>
      <link>http://www.heguangnan.com/post/book-review-thinking-in-java/</link>
      <pubDate>Tue, 26 Jul 2016 09:50:57 +0800</pubDate>
      
      <guid>http://www.heguangnan.com/post/book-review-thinking-in-java/</guid>
      <description>Reading Book 断断续续的看了将近一个多月，算是系统复习下，一来不能让书白买了，二来毕竟很长一段时间没有做过大规模的Java开发了，Java还是很有意思的，后面还会有很多Book Review。 需要说明的是，后面几个章节没有什么笔记。原因是他们都太工程化了，需要更多的实践，就没再记录。后面尽量每个topic都有单独的blog。 学无止境
第五章 初始化与清理  根据参数列表不同进行函数重载，无法根据返回值进行函数重载。因为函数调用者不关心函数的返回值，编译器就无法判定。参数列表的不同顺序也能区分不同的函数，但是这样维护性不够好，不建议这样做。 如果自己类里面已经定义了一个构造器，无论是否有参数，编译器都不会再生成默认的构造器了，跟C++一样。 this 关键字代表当前对象，可以用this调用一个构造器，但是不能同时调用两个；也必须将构造器调用置于最开始的地方，否则编译器会报错。 finalize 用于验证终结条件。垃圾回收和终结，都不保证一定会发生。如果java虚拟机并未面临内存耗尽的情况。  对象可能不被垃圾回收 垃圾回收不等价与析构 垃圾回收只与内存有关。 终结函数要避免使用  在定义类成员变量的地方为其赋值。构造器初始化之前，类成员变量就已经进行了初始化。类内部，变量定义的先后顺序决定了初始化的顺序。即使变量定义散布于方法定义之间，他仍旧会在任何方法被调用之前得到初始化。
 初始化顺序是先静态对象，并只在Class对象首次加载时执行一次； new 分配内存； 执行字段定义处的初始化动作； 执行构造器。  静态初始化只在Class 对象首次加载的时候进行一次。非静态实例初始化，与静态初始化子句一模一样，只是少了static关键字。这种语法对于支持匿名内部类的初始化是必须的。 实例初始化字句：
   class Mug { Mug(int marker) { print(&amp;quot;Mug(&amp;quot; + marker + &amp;quot;)&amp;quot;); } void f(int marker) { print(&amp;quot;f(&amp;quot; + marker + &amp;quot;)&amp;quot;); } } public class Mugs { Mug mug1; Mug mug2; { mug1 = new Mug(1); mug2 = new Mug(2); print(&amp;quot;mug1 &amp;amp; mug2 initialized&amp;quot;); } Mugs() { print(&amp;quot;Mugs()&amp;quot;); } Mugs(int i) { print(&amp;quot;Mugs(int)&amp;quot;); } public static void main(String[] args) { print(&amp;quot;Inside main()&amp;quot;); new Mugs(); print(&amp;quot;new Mugs() completed&amp;quot;); new Mugs(1); print(&amp;quot;new Mugs(1) completed&amp;quot;); } } /* Output: Inside main() Mug(1) Mug(2) mug1 &amp;amp; mug2 initialized Mugs() new Mugs() completed Mug(1) Mug(2) mug1 &amp;amp; mug2 initialized Mugs(int) new Mugs(1) completed   可变参数列表：void f(Object&amp;hellip; args),除了Object之外，其他的数据类型也可以作为可变参数列表。  第六章 访问权限控制  访问权限等级：public，protected，包访问权限，private。 一个java源文件为一个编译单元，每个编译单元只能有一个public类。java可运行程序是一组可以打包压缩为一个java文档文件的.</description>
    </item>
    
  </channel>
</rss>