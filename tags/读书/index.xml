<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>读书 on 三十重围</title>
    <link>http://www.heguangnan.com/tags/%E8%AF%BB%E4%B9%A6/</link>
    <description>Recent content in 读书 on 三十重围</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-EN</language>
    <lastBuildDate>Wed, 01 Jun 2016 13:32:34 +0800</lastBuildDate>
    
	<atom:link href="http://www.heguangnan.com/tags/%E8%AF%BB%E4%B9%A6/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>读书：微服务设计</title>
      <link>http://www.heguangnan.com/post/%E8%AF%BB%E4%B9%A6%E5%BE%AE%E6%9C%8D%E5%8A%A1%E8%AE%BE%E8%AE%A1/</link>
      <pubDate>Wed, 01 Jun 2016 13:32:34 +0800</pubDate>
      
      <guid>http://www.heguangnan.com/post/%E8%AF%BB%E4%B9%A6%E5%BE%AE%E6%9C%8D%E5%8A%A1%E8%AE%BE%E8%AE%A1/</guid>
      <description>就是这样的一本书，来的非常及时。
总体认识 微服务绝不是什么新技术或者新框架之类的，就算概念也不是新的。没有看书之前或许会认为微服务是中心化新的架构模式，看书后会发现其实微服务是个生态圈。 为什么会这么说，他是什么样的生态圈。或许这是整个软件行业的生态发展趋势，比如SaaS软件已在某些领域获得巨大成功，其背后的支撑技术跟微服务有莫大的关联。 微服务是个生态，围绕这样的生态圈有强大的技术支撑。例如微服务的部署、监控、发现、故障处理、负载均衡、扩展、安全、高可用性、自动化测试等等。这些技术都不是新技术， 或许就因为这些技术发展到一定程度后的一次整体升级换代，相比传统的单块软件部署开发模式，这些技术面临的挑战或许更让人激动人心。
书中最后总结得出微服务的原则： 微服务自治的小服务微服务&amp;lt;div&amp;gt;自治的小服务&amp;lt;/div&amp;gt;围绕业务概念建模围绕业务&amp;lt;div&amp;gt;概念建模&amp;lt;/div&amp;gt;自动化的文化[Not supported by viewer]隐藏内部实现细节隐藏内部&amp;lt;div&amp;gt;实现细节&amp;lt;/div&amp;gt;一切都去中心化一切都去&amp;lt;div&amp;gt;中心化&amp;lt;/div&amp;gt;独立部署独立部署隔离失败隔离失败高度可观察高度可观察
七个原则都有较好的指导性，在践行微服务前，先对照看下能否满足这七条原则。下面从头开始梳理、认识下微服务的设计过程。
微服务 概念先行这个很重要，任何学科都是。 微服务定义： 1. 很小，专注于做好一件事情。内聚性很重要，微服务需要有很好的内聚性，即做到因相同原因而变化的东西聚合到一起，而把不同原因而变化的东西的分离开来，这也是专注的含义。 多小才算小，一个微服务可以在两周内重写掉。服务越小，独立性带来的好处就会越多，而同样服务管理也会越复杂。 2. 自治性。独立部署，通过暴露API，使用网络通信，避免紧耦合。需要正确的建模服务和API。
演化式架构师 本章讲解了如何去做一个合格的架构师。这个对于一个架构师或者将要成为架构师的人来说很有指导意义，特别是面临微服务架构演进时。
测试 测试类型定义： 验收测试我们是否实现了正确的功能？自动化测试 Fit-Finess[Not supported by viewer]面向业务面向业务支持团队支持团队评价产品评价产品面向技术面向技术探索性测试可用性测试：我如何破坏系统功能手工
[Not supported by viewer]单元测试我们是否正确地实现了功能自动化的 xUnit系列单元测试&amp;lt;div&amp;gt;我们是否正确地实现了功能&amp;lt;/div&amp;gt;&amp;lt;div&amp;gt;自动化的 xUnit系列&amp;lt;/div&amp;gt;非功能性测试响应时间；可扩展性；性能测试；安全测试工具[Not supported by viewer]
深入微服务之前，首先要解决的就是自动化的测试。
测试范围  单元测试：是帮助开发人员的，是面向技术而非业务的。单元测试对于代码重构非常重要。 服务测试：绕开用户界面，直接对服务的测试。测试单独的服务，可以提高测试的隔离性，这样可以更快的定位解决问题。 端到端测试：覆盖整个系统，是需要通过浏览器操作图形用户界面。  实现服务测试 打桩还是mock，打桩是指被测试服务的请求创建一些有着预设响应的打桩服务。mock还会进一步验证请求本身是否被正确调用，也可以用来验证预期的副作用是否发生。
脆弱的测试 随着测试范围的扩大，纳入测试的服务范围也会变多，这样测试失败的可能性就会更大。
拯救消费者驱动的测试 端到端测试试图解决的关键问题，就是确保部署新的服务到生产环境后，变更不会破坏新服务的消费者。一种不需要真正的消费者也能达到相同的目的：CDC，Consumer-Driven Contact 消费者驱动的契约。使用CDC时，我们会定义服务（或生产者）的消费者的期望。这些期望会变成对生产者运行的测试代码。 PACT 是一个消费者驱动的测试工具。 工作流程：
对其运行对其运行使用PACT DLS定义的期望使用PACT DLS定义的期望PACT mock服务器PACT mock服务器消费者端消费者端生成消费者规范生成消费者规范PACT brokerCI/CD工具的构建物仓库PACT broker&amp;lt;div&amp;gt;CI/CD工具的构建物仓库&amp;lt;/div&amp;gt;存储在存储在Pact HelperPact Helper生产者生产者获取自获取自生产者端生产者端使用PACT规范调用使用PACT规范调用
后面会补充下实践经验。
如果建模微服务 好的微服务的定义：高内聚，松耦合。从而引出服务边界的问题。
限界上下文  共享的隐藏模型； 模块和服务 过早划分  边界问题如何划分；基于业务功能、还是技术边界。本章主要是一些概念的陈述。</description>
    </item>
    
  </channel>
</rss>