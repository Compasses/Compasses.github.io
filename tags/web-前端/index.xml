<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Web 前端 on 三十重围</title>
    <link>http://www.heguangnan.com/tags/web-%E5%89%8D%E7%AB%AF/</link>
    <description>Recent content in Web 前端 on 三十重围</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-EN</language>
    <lastBuildDate>Wed, 05 Aug 2015 20:45:07 +0800</lastBuildDate>
    
	<atom:link href="http://www.heguangnan.com/tags/web-%E5%89%8D%E7%AB%AF/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>前端经验</title>
      <link>http://www.heguangnan.com/post/%E5%89%8D%E7%AB%AF%E7%BB%8F%E9%AA%8C/</link>
      <pubDate>Wed, 05 Aug 2015 20:45:07 +0800</pubDate>
      
      <guid>http://www.heguangnan.com/post/%E5%89%8D%E7%AB%AF%E7%BB%8F%E9%AA%8C/</guid>
      <description>最近还是比较忙，blog好久没有写了，当然也不排除自己有点懈怠。也没有什么太多要写的，就是些工作上的事情。最近做前端比较多，还是就写写前端的一些经验吧。之前也说过，前端就是一个积累的过程，另外多借鉴一些成熟的前端框架会对自己的水平提高很有帮助。
CSS相关 因为开发是基于LESS的，所以代码相关的都是LESS的代码。 ##mixin 可以看作是面向对象的CSS，直白的讲就是混合引入，也有翻译是混入或混合，这样感觉都是很模糊的。其实功能上就是定义一组属性、style在一个mixin中，可以让其他的class直接引用，作为公共的基础class。例如：
.ellipsis (@width) { width: @width; overflow: hidden; text-overflow: ellipsis; white-space: nowrap; }  这个ellipsis class会将定宽文本进行截断，这样的class可能会在网站中多处使用，而且每次使用宽度可变，这样在使用时传入想要宽度的参数即可。例如产品名字的class：
product-name { .ellipsis(8em); ... }  media 由于前端一直在使用bootstrap，所以所有的responsive相关的design都是依赖bootstrap来实现。bootstrap的栅格系统需要一定的使用规则，有的时候过度使用会导致DOM结构过去复杂化了。例如其中的form，form里面必须按照一个input一个label的排列，如果想要添加一些文本信息或者增加其他的标签，又让他保持responsive，必须通过类似row下的col再嵌套row和col，这样就实现很复杂，让DOM结构看起来混乱不堪。 其实看看bootstrap.css里面的代码也不难发现，其实responsive的代码也不难写，问题是你不需要去写一个框架，框架的代码是普适的。你只是为了满足一个小特性，所以代码也会写的很精简。
使用media query 来索引屏幕尺寸并进行特定class的apply。可以让网页支持较好的自适应性。例如针对小屏幕某个class需要有些自适应的属性，下面这个css class在小屏幕上，屏幕宽度小于767px时，左侧增加20px的margin。
.class-name { @media(max-width: 767px) { margin-left: 20px; ... } }  上面是在class里面进行屏幕适应，更多的时候是定义整个class为自适应：
@media only screen and (max-width: 767px) { .class-name { ... } }  根据不同的尺寸class里面的style进行相应的变化。bootstrap也是这么玩的。 在移动设备上有横屏和竖屏的区分，也能做相应的自适应。 关键的属性：
| media 属性 | 结果| | &amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;- |:&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;-:| | min-width | 当任意浏览器宽度大于查询中定义的值时适用的规则。 | | max-width | 当任意浏览器宽度小于查询中定义的值时适用的规则。 | | min-height | 当任意浏览器高度大于查询中定义的值时适用的规则。 | | max-height | 当任意浏览器高度小于查询中定义的值时适用的规则。| | orientation=portrait| 高度大于或等于宽度的任意浏览器适用的规则。相当于竖屏。| | orientation=landscape| 宽度大于高度的任意浏览器适用的规则。相当于横屏。|</description>
    </item>
    
    <item>
      <title>WEB 开发点滴</title>
      <link>http://www.heguangnan.com/post/web-tech-1/</link>
      <pubDate>Tue, 07 Jul 2015 20:45:07 +0800</pubDate>
      
      <guid>http://www.heguangnan.com/post/web-tech-1/</guid>
      <description>&lt;p&gt;WEB开发错综复杂，很多知识点让你抓不到重点，用过了忘记了，下次用还要重头开始。例如CSS，很多class，很多的取值，每个都有很多视觉效果。拿到UX的design，不同的人做出来的效果可以保持一致，但是对应的CSS和JS可能完全不一样。正是这种WEB开发的灵活性，更让人抓不到重点。&lt;/p&gt;

&lt;p&gt;最近又在做一些UI的开发工作，集中在前端，需要CSS和JS，事情做完了，仔细想想里面用到的CSS class都理解了吗？发现并没用。如此众多，如何才能掌握这些class呢？突然想到CSS class虽然众多但是用到的不是全集，所以在学习上也要化整为零，化繁为简，各个击破。这次就好好记录下CSS中的overflow和position类。&lt;/p&gt;

&lt;h1 id=&#34;position&#34;&gt;POSITION&lt;/h1&gt;

&lt;p&gt;解释说明：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;position
    
&#39;position&#39;
Value:  
static | relative | absolute | fixed | inherit
Initial:  
static
Applies to:  
all elements
Inherited:  
no
Percentages:  
N/A
Media:  
visual
Computed value:  
as specified
The values of this property have the following meanings:
static
The box is a normal box, laid out according to the normal flow. The &#39;top&#39;, &#39;right&#39;, &#39;bottom&#39;, and &#39;left&#39; properties do not apply.
relative
The box&#39;s position is calculated according to the normal flow (this is called the position in normal flow). Then the box is offset relative to its normal position. When a box B is relatively positioned, the position of the following box is calculated as though B were not offset. The effect of &#39;position:relative&#39; on table-row-group, table-header-group, table-footer-group, table-row, table-column-group, table-column, table-cell, and table-caption elements is undefined.
absolute
The box&#39;s position (and possibly size) is specified with the &#39;top&#39;, &#39;right&#39;, &#39;bottom&#39;, and &#39;left&#39; properties. These properties specify offsets with respect to the box&#39;s containing block. Absolutely positioned boxes are taken out of the normal flow. This means they have no impact on the layout of later siblings. Also, though absolutely positioned boxes have margins, they do not collapse with any other margins.
fixed
The box&#39;s position is calculated according to the &#39;absolute&#39; model, but in addition, the box is fixed with respect to some reference. As with the &#39;absolute&#39; model, the box&#39;s margins do not collapse with any other margins. In the case of handheld, projection, screen, tty, and tv media types, the box is fixed with respect to the viewport and doesn&#39;t move when scrolled. In the case of the print media type, the box is rendered on every page, and is fixed with respect to the page box, even if the page is seen through a viewport (in the case of a print-preview, for example). For other media types, the presentation is undefined. Authors may wish to specify &#39;fixed&#39; in a media-dependent way. For instance, an author may want a box to remain at the top of the viewport on the screen, but not at the top of each printed page. The two specifications may be separated by using an @media rule, as in:
Example(s):
  
@media screen {
  h1#first { position: fixed }
}
@media print {
  h1#first { position: static }
}
UAs must not paginate the content of fixed boxes. Note that UAs may print invisible content in other ways. See &amp;quot;Content outside the page box&amp;quot; in chapter 13.
User agents may treat position as &#39;static&#39; on the root element.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;元素的位置定位影响它的视觉模型，例如：p, h1, div 为块级元素，块级元素在展示的时候是以垂直摆放的，元素之间的垂直距离由垂直间隔决定，即margin。又如：strong、span为inline elements，内联元素。展示为水平摆放，这种元素改变视觉效果只能通过line height、或者水平 border 、padding、margin。&lt;/p&gt;

&lt;h2 id=&#34;relative-position&#34;&gt;relative position&lt;/h2&gt;

&lt;p&gt;相对定位比较简单，就是可以通过属性 top、left、bottom、right来改变它的位置，改变是相对于它的原始位置开始计算的。它于正常的文档流定位类似。跟position的另一个取值static一样，如果不改变它的位置属性值。&lt;/p&gt;

&lt;h2 id=&#34;absolute-position&#34;&gt;absolute position&lt;/h2&gt;

&lt;p&gt;类似于relative position，absolute position是相对于其最近的父节点而摆放。如果没有最近的父节点，就绑定在body元素上。absolute position让其父节点必须是relative position。&lt;/p&gt;

&lt;h2 id=&#34;fixed-position&#34;&gt;fixed position&lt;/h2&gt;

&lt;p&gt;是absolute position的子类，不同的是它的视口是整个window， 利用它就可以固定一个元素在这个窗口视图上，无论怎么滚动这个元素会固定在这个窗口中。&lt;/p&gt;

&lt;h2 id=&#34;floating&#34;&gt;floating&lt;/h2&gt;

&lt;p&gt;floatting也是重要的布局类，经常需要将一个元素靠左或者靠右对齐。靠左或者靠右直到它的外边缘与父节点边缘接壤，或者其他float元素的边缘。float元素并不在正常的文档流中。即只要元素变为float元素了，其所在的body就会将其视为不存在了。在实现那些文字环绕的效果时，都会使用到这个class，因为float元素会脱离正常的文档流，所以在制作这种效果的时候需要用clear配合使用。&lt;/p&gt;

&lt;h1 id=&#34;overflow&#34;&gt;overflow&lt;/h1&gt;

&lt;p&gt;解释：
&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>