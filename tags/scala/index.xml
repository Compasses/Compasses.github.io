<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Scala on 三十重围</title>
    <link>http://www.heguangnan.com/tags/scala/</link>
    <description>Recent content in Scala on 三十重围</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-EN</language>
    <lastBuildDate>Wed, 05 Apr 2017 17:36:47 +0800</lastBuildDate>
    
	<atom:link href="http://www.heguangnan.com/tags/scala/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>读书：Functional Programming In Scala （Part 1）</title>
      <link>http://www.heguangnan.com/post/functionalprogramming/</link>
      <pubDate>Wed, 05 Apr 2017 17:36:47 +0800</pubDate>
      
      <guid>http://www.heguangnan.com/post/functionalprogramming/</guid>
      <description>学习Scala更多的是一种思想的转变。不同于传统的编程语言，例如C++，Java，Golang等，个人感觉他们没有本质的区别，无非是内存、CPU、IO等等，或者他们都是命令式的编程思想，面向冯诺依曼体系结构的。无非就是内存、变量、赋值、表达式、控制结构等。所以这些语言，使用起来没有太多违和感，特别是有了较多的C++开发经验的时候。
Scala不同，它不再是那种冯诺依曼体系结构的编程思想了，更多的是一种数学的编程思想的体现。通过这本书：Functional Programming in Scala，可以很好的了解到这种思想的转变。所以要比较好的掌握Scala，思想转变是必须的。那么好好看看这本书也是理所当然的了。
Functional Programming是个很大的topic，它的理论基础是Lambda calculus，Lambda calculus是一种数学计算抽象。跟上面所说那样，Lambda calculus不会关注内存、变量、赋值等语句了，而更多的是各种函数算子的变换。研究生还上过这个计算理论课，可惜当时没有学习一门函数式编程语言。所以函数式编程可以理解为面向函数的编程。就像Java一样，面向对象的编程。函数式编程的理论基础便是Lambda calculus，这里有对其比较清晰的介绍。
举几个例子:
例如数学里面的函数二元变量的函数：f(x, y) = x*x + y*y，可以抽象表示成：x-&amp;gt;(y-&amp;gt;x*x+y*y)，那么一次调用(x-&amp;gt;(y-&amp;gt;x*x+y*y))(3)(4)，就如同调用f(3, 4)。所以可以把任意的多元函数转变成一元的高阶函数，这个过程也要Currying。例如代码：
def foldLeft[A,B](as: List[A], z: B)(f: (B, A) =&amp;gt; B): B = as match { case Nil =&amp;gt; z case Cons(h, t) =&amp;gt; foldLeft(t, f(z,h))(f) }  其中List的定义：
sealed trait List[+A] case object Nil extends List[Nothing] case class Cons[+A](head: A, tail: List[A]) extends List[A]  理解foldLeft是理解其他函数的基础。它所做的就是将链表中的元素实施一个函数变换，也可以理解为规约。比如一个例子：
def sum(ns: List[Int]) = foldLeft(ns, 0)((x,y)=&amp;gt;x+y)  很明显这个函数就是求取这个list的sum。通过一个函数的组合调用就能完成。如果换成其他语言来完成这个运算，可能想到的就是通过循环，定义sum变量，进行累加了。</description>
    </item>
    
  </channel>
</rss>