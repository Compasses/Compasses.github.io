<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Go on 三十重围</title>
    <link>http://www.heguangnan.com/tags/go/</link>
    <description>Recent content in Go on 三十重围</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-EN</language>
    <lastBuildDate>Fri, 23 Oct 2015 22:45:07 +0800</lastBuildDate>
    
	<atom:link href="http://www.heguangnan.com/tags/go/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>golang interface analysis by gdb</title>
      <link>http://www.heguangnan.com/post/golang-interface-analysis-by-gdb/</link>
      <pubDate>Fri, 23 Oct 2015 22:45:07 +0800</pubDate>
      
      <guid>http://www.heguangnan.com/post/golang-interface-analysis-by-gdb/</guid>
      <description>interface 在go语言中，是非常重要的一环，总有点让人感到很玄乎不定的感觉。官方的lib中有大量使用，似乎面向对象和动态绑定也能跟interface扯上关系。总之，如果能更好的理解interface的机理，就能更好的理解和使用Go了。
interface的较为深层次的探讨在这篇blog里面已经有较为详细的介绍。但是缺乏一些实践，本文遍结合此文，使用GDB实际研究一下。
interface 内部存储 interface的值，其实是两个指针的组合：data 和 tab。data 实际指向值的指针，tab是go runtime的一个struct：
// layout of Itab known to compilers // allocated in non-garbage-collected memory type itab struct { inter *interfacetype _type *_type link *itab bad int32 unused int32 fun [1]uintptr // variable sized }  在运行时该结构会被runtime库计算出来，保证interface的正常运转。 使用go build -gcflags &amp;ldquo;-N -l&amp;rdquo;编译便可以是用GDB来debug了。 断点断在最后一行代码，代码在最后列出。
(gdb) info locals b = 200 s = {tab = 0x7ffff7e0f1c0, data = 0xc82000a3b0} nothing = {_type = 0x4c1360, data = 0xc82000a430} face = {tab = 0x0, data = 0x0} any = {_type = 0x4e4a80, data = 0xc82000a3c0}  首先看变量*s*，内部有个tab指针和data指针。</description>
    </item>
    
    <item>
      <title>Go Go</title>
      <link>http://www.heguangnan.com/post/go-go/</link>
      <pubDate>Thu, 09 Jul 2015 17:45:07 +0800</pubDate>
      
      <guid>http://www.heguangnan.com/post/go-go/</guid>
      <description>最近在学习Go语言。认识Go语言是个偶然，首选是Docker容器的使用，Docker的兴起目前可谓风生水起，应用部署和各种云平台都在推行。其使用Go语言开发，之前没有听说过的。断断续续的找相关的博客、资料进行了解。发现Go 是有很多吸引人的地方，自己非常感兴趣，最近买的一本《Go Web编程》今天到手了。
也说下自己的缘由，很多人都说Go 很容易上手，这应该对C系的开发人员而说的，Go语言的发明者也是C语言的作者，Go语言本身很多的语法、类型、结构等用法类似于C语言，如果编译运行的话二进制文件都能用GDB进行调试。Go语言是个集大成者，在里面你能看到或者重新认识一些语言特性，它有诸多动态语言特有的特性。
 首选想说的就是函数闭包，闭包函数在JavaScript里面应用的最广泛，用于各种回调处理、变量的scope控制等，在Go语言里面也有，使用起来几乎没有什么差别，也能当成变量传递等等。 内置强大的数据结构，例如slice、map，开发的快捷易用性可以和Python媲美。slice 类似于Python、PHP里面的array，map也和Python里面的字典。 interface的类型使用，interface让Go有了面向对象的能力，interface是非常有魔力的东西，应该会是非常广泛的，把面向对象的能力放大了。Go里面的反射功能也是依赖于interface，这篇文章Go Data Structures: Interfaces有较深入的讲解。 并发编程的支持，可以写并发执行的代码，通过go关键字来完成。goroutine确是是个好东西，用户层上的并发协程，能有效的利用多核计算能力。Go能原生的支持并发编程并能很好的利用多核能力是个极大的优势。  有人说不能把Go作为偏向Web的语言，这应该是比较片面的。就像Python一样，一直都是当成工具使用，能快速的开发一些小工具，而现在呢，Python的Web框架为Python的流行应该是起了主要作用。Go的使用应该要偏向云平台开发、Web开发，高性能、高并发的场景。试想下Docker的流行，国内七牛公司对Go语言的推崇。
Go相对于PHP、JAVA年轻很多，但自己相信它会成为后起之秀，也做好了这个准备。
很高兴开启Go语言之旅。</description>
    </item>
    
  </channel>
</rss>