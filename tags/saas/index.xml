<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Saas on 三十重围</title>
    <link>http://www.heguangnan.com/tags/saas/</link>
    <description>Recent content in Saas on 三十重围</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-EN</language>
    <lastBuildDate>Sun, 29 May 2016 14:34:35 +0800</lastBuildDate>
    
	<atom:link href="http://www.heguangnan.com/tags/saas/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>SaaS DataBase</title>
      <link>http://www.heguangnan.com/post/saas-database/</link>
      <pubDate>Sun, 29 May 2016 14:34:35 +0800</pubDate>
      
      <guid>http://www.heguangnan.com/post/saas-database/</guid>
      <description>距离上次日志已有将近半年的时间，由于经历了很多工作上的事情，少写了日志，算是自己的疏漏吧。后续要多写几篇，把最近落下的补上。
为什么会写这样的一篇日志，一来是公司最近推行MSA，即微服务化，现在很多公司都在推行，各种大会大家都在述说着自己的优秀实践。二来自己目前做的工作与数据存储有很大关系，由于之前的方案也存在着诸多问题，需要做些改变了。这里就记录下来看看心理路程吧。
SaaS的概念已经出现很久了，至少10年前就已经很热了。但关于这个概念的背后，至今大家都在沿用着，个人喜欢的一个图：

上图出自于Architecture Strategies for Catching the Long Tail，这里针对图的内容再做些介绍。 图中展示了SaaS软件的发展方向，其实原意是SaaS的成熟度模型，实质也是SaaS软件的发展方向。而软件的发展最终会向SaaS软件靠拢，毕竟在发展的过程中资源会不断的优化配置，社会分工也会更细。这样管业务的就专心做好业务了，管资源管理的就专做资源管理，必须大型的PaaS平台等等。云计算本质上也是一个意思，把自己的软件部署到云上，管理维护的负担就没有了，交给了专门负责那方面的第三方合作伙伴。ok，回到图上。
 第一象限：就level 1，表达的就是定制化软件，其与传统的软件并没有太大区别。对于不同的tenant都不同的应用主机。 第二象限，configurable， 即应用主机会是同一份但是针对不同的tenant会有不同的配置，通过大量的配置来实现不同用户的需求。主机是隔离的，每个tenant独享一台 第三象限，configurable，multi-tenant 有效的，处于第三level成熟度的SaaS服务，使用同一台主机服务所有用户。因为共享一台服务，合理的降低了成本，通过metadata实现定制化。这里最大的缺陷就是扩展性问题，因使用同一台主机遇到性能问题只能更换到更强大的server上面。 第四象限，合理解决了第三象限的问题，即扩展性问题。通过一个负载均衡器对所有的主机进行负载均衡，每个tenant根据不用的metadata实现私有化。这样的结构可以支撑更多的tenant，并能有效的降低成本。将会是所有SaaS服务商最终的实现方案。  由于本文要讲的是database，所以请将上述中的主机换成DB 主机，不同的tenant不同的metadata，这也对应着tenant的DB。让我们步入正题，怎么样才是更合理的SaaS 数据库，又如何实现？ 其实针对SaaS的数据库服务，还有个概念DaaS，Data as a service，它是SaaS的表亲，目前也有很多云计算公司提供这样的服务，当然这是宏观上的，这里就关注下如果让自己是实现应该怎么做。 目前互联网大部分的架构都是LNMP，mysql作为存储服务器，怎么让mysql变得可以扩展，并保持高性能，是SaaS软件必然要解决的问题，即实现上述的第四象限。
实现SaaS的database，最好就是DaaS了，但是做到DaaS是比较困难的，需要部署、监控、配置自动化，failover和动态伸缩等等。所以目前比较常用的是中间件技术。比如360的Atlas，阿里的cobar。这些中间件都有一些共同也是中间件主要要解决的问题：
 连接池，MySQL服务器在高并发下性能会很差，因为每个连接mysql都会启动一个线程处理，连接池通过连接复用会大大减轻MySQL服务器的负担。 分库分表，这项功能解决了扩展问题，MySQL的单表只能支撑百万级别的数据，有上千万甚至亿、几十亿等级别的数据单表是无法存储的。通过中间件将表存储到多个MySQL server中，还要支持查询结果从多个数据库实例做归并。 升级、负载均衡，proxy后台有多个MySQL的实例，每个instance其实也是个cluster，升级时势必要关停一中一个，则请求会被迅速转移到cluster中的其它主机上。负载均衡更是一种基础功能，每个请求会被负载均衡分发到cluster中。 读写分离，个人认为这是比较重要但不是必须的。cluster中做负载均衡即可，大部分的场景还是读多写少，完全放在一个instance上也不会有问题，读写分离还是会有不少的兼容性问题。 监控，运行状态等，监控各个节点的运行状态，并自动记录慢查询等，输出runlog，供DBA查看。  如果一个中间件能完美的做到上述5点，应该就能胜任SaaS的数据存储了。</description>
    </item>
    
  </channel>
</rss>