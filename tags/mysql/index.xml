<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Mysql on 三十重围</title>
    <link>http://www.heguangnan.com/tags/mysql/</link>
    <description>Recent content in Mysql on 三十重围</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-EN</language>
    <lastBuildDate>Sun, 29 May 2016 14:34:35 +0800</lastBuildDate>
    
	<atom:link href="http://www.heguangnan.com/tags/mysql/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>SaaS DataBase</title>
      <link>http://www.heguangnan.com/post/saas-database/</link>
      <pubDate>Sun, 29 May 2016 14:34:35 +0800</pubDate>
      
      <guid>http://www.heguangnan.com/post/saas-database/</guid>
      <description>距离上次日志已有将近半年的时间，由于经历了很多工作上的事情，少写了日志，算是自己的疏漏吧。后续要多写几篇，把最近落下的补上。
为什么会写这样的一篇日志，一来是公司最近推行MSA，即微服务化，现在很多公司都在推行，各种大会大家都在述说着自己的优秀实践。二来自己目前做的工作与数据存储有很大关系，由于之前的方案也存在着诸多问题，需要做些改变了。这里就记录下来看看心理路程吧。
SaaS的概念已经出现很久了，至少10年前就已经很热了。但关于这个概念的背后，至今大家都在沿用着，个人喜欢的一个图：

上图出自于Architecture Strategies for Catching the Long Tail，这里针对图的内容再做些介绍。 图中展示了SaaS软件的发展方向，其实原意是SaaS的成熟度模型，实质也是SaaS软件的发展方向。而软件的发展最终会向SaaS软件靠拢，毕竟在发展的过程中资源会不断的优化配置，社会分工也会更细。这样管业务的就专心做好业务了，管资源管理的就专做资源管理，必须大型的PaaS平台等等。云计算本质上也是一个意思，把自己的软件部署到云上，管理维护的负担就没有了，交给了专门负责那方面的第三方合作伙伴。ok，回到图上。
 第一象限：就level 1，表达的就是定制化软件，其与传统的软件并没有太大区别。对于不同的tenant都不同的应用主机。 第二象限，configurable， 即应用主机会是同一份但是针对不同的tenant会有不同的配置，通过大量的配置来实现不同用户的需求。主机是隔离的，每个tenant独享一台 第三象限，configurable，multi-tenant 有效的，处于第三level成熟度的SaaS服务，使用同一台主机服务所有用户。因为共享一台服务，合理的降低了成本，通过metadata实现定制化。这里最大的缺陷就是扩展性问题，因使用同一台主机遇到性能问题只能更换到更强大的server上面。 第四象限，合理解决了第三象限的问题，即扩展性问题。通过一个负载均衡器对所有的主机进行负载均衡，每个tenant根据不用的metadata实现私有化。这样的结构可以支撑更多的tenant，并能有效的降低成本。将会是所有SaaS服务商最终的实现方案。  由于本文要讲的是database，所以请将上述中的主机换成DB 主机，不同的tenant不同的metadata，这也对应着tenant的DB。让我们步入正题，怎么样才是更合理的SaaS 数据库，又如何实现？ 其实针对SaaS的数据库服务，还有个概念DaaS，Data as a service，它是SaaS的表亲，目前也有很多云计算公司提供这样的服务，当然这是宏观上的，这里就关注下如果让自己是实现应该怎么做。 目前互联网大部分的架构都是LNMP，mysql作为存储服务器，怎么让mysql变得可以扩展，并保持高性能，是SaaS软件必然要解决的问题，即实现上述的第四象限。
实现SaaS的database，最好就是DaaS了，但是做到DaaS是比较困难的，需要部署、监控、配置自动化，failover和动态伸缩等等。所以目前比较常用的是中间件技术。比如360的Atlas，阿里的cobar。这些中间件都有一些共同也是中间件主要要解决的问题：
 连接池，MySQL服务器在高并发下性能会很差，因为每个连接mysql都会启动一个线程处理，连接池通过连接复用会大大减轻MySQL服务器的负担。 分库分表，这项功能解决了扩展问题，MySQL的单表只能支撑百万级别的数据，有上千万甚至亿、几十亿等级别的数据单表是无法存储的。通过中间件将表存储到多个MySQL server中，还要支持查询结果从多个数据库实例做归并。 升级、负载均衡，proxy后台有多个MySQL的实例，每个instance其实也是个cluster，升级时势必要关停一中一个，则请求会被迅速转移到cluster中的其它主机上。负载均衡更是一种基础功能，每个请求会被负载均衡分发到cluster中。 读写分离，个人认为这是比较重要但不是必须的。cluster中做负载均衡即可，大部分的场景还是读多写少，完全放在一个instance上也不会有问题，读写分离还是会有不少的兼容性问题。 监控，运行状态等，监控各个节点的运行状态，并自动记录慢查询等，输出runlog，供DBA查看。  如果一个中间件能完美的做到上述5点，应该就能胜任SaaS的数据存储了。</description>
    </item>
    
    <item>
      <title>deadlock of mysql</title>
      <link>http://www.heguangnan.com/post/deadloc/</link>
      <pubDate>Fri, 26 Jun 2015 15:45:07 +0800</pubDate>
      
      <guid>http://www.heguangnan.com/post/deadloc/</guid>
      <description>没有想到在看似简单的场景里面也能遇到mysql的deadlock。
[Thu Jun 25 05:18:40.589897 2015] [:error] [pid 737] [client 172.17.42.1:41290] WordPress database error Deadlock found when trying to get lock; try restarting transaction for query UPDATE `wp_usermeta` SET `meta_value` = &#39;a:2:{s:64:\\&amp;quot;1161a6271c528045db428cc8698bbc8e3e26ad4fb9d7436e32cbbe01a00079d0\\&amp;quot;;i:1436419120;s:64:\\&amp;quot;bf2e3582e17c7dfa1e6b02c700f537b8095f2b31ef58e4b448939eb9406e11f7\\&amp;quot;;i:1435382320;}&#39; WHERE `user_id` = 188 AND `meta_key` = &#39;session_tokens&#39; made by require(&#39;wp-blog-header.php&#39;), require_once(&#39;wp-includes/template-loader.php&#39;), do_action(&#39;template_redirect&#39;), call_user_func_array, anw_template_redirect, ANW_Base_Controller-&amp;gt;process, call_user_func, ANW_AccountOnePage_Controller-&amp;gt;authenticate, wp_signon, wp_set_auth_cookie, WP_Session_Tokens-&amp;gt;create, WP_Session_Tokens-&amp;gt;update, WP_User_Meta_Session_Tokens-&amp;gt;update_session, WP_User_Meta_Session_Tokens-&amp;gt;update_sessions, update_user_meta, update_metadata  这是wordpress本身的缺陷导致的，死锁的场景也是不复杂。即session_tokens的更新机制所致。 Session_tokens的更新是随着用户的login和 logout 更新的。Login时会增加session_tokens, 在不同的 浏览器 login会增加新的 tokens，在 logout时会删除这个 tokens。 这个死锁用户有两个 session，场景可能就是不同的浏览器同时做 login或者 logout，或者一个 login另一个 logout。看这个环境上有大量的用户存在，并且每个用户至多有两个 session，也只有跑性能脚本会有这个问题。现实情况比较难复现。</description>
    </item>
    
    <item>
      <title>straight_join when and why</title>
      <link>http://www.heguangnan.com/post/straight-join/</link>
      <pubDate>Tue, 19 May 2015 10:45:07 +0800</pubDate>
      
      <guid>http://www.heguangnan.com/post/straight-join/</guid>
      <description>&lt;h3 id=&#34;问题过程&#34;&gt;问题过程&lt;/h3&gt;

&lt;p&gt;最近优化了一个查询语句，使用到了straight_join这个查询提示，现对其做下总结。
先看下这个查询语句：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;SELECT wp_posts.ID
FROM wp_posts
INNER JOIN wp_postmeta ON (wp_posts.ID = wp_postmeta.post_id)
INNER JOIN
  (SELECT
   STRAIGHT_JOIN DISTINCT wp_posts.ID
   FROM wp_posts
   INNER JOIN wp_postmeta meta0 ON meta0.post_id = wp_posts.id
   AND meta0.meta_key = &#39;sysfield_code&#39;
   AND CAST(meta0.meta_value AS CHAR) LIKE &#39;%s%&#39;
   INNER JOIN wp_postmeta meta1 ON meta1.post_id = wp_posts.id
   AND meta1.meta_key = &#39;price_sales_RMB&#39;
   AND CAST(meta1.meta_value AS DECIMAL(10,4)) &amp;gt; &#39;20&#39;
   INNER JOIN wp_postmeta meta2 ON meta2.post_id = wp_posts.id
   AND meta2.meta_key = &#39;price_standard_RMB&#39;
   AND CAST(meta2.meta_value AS DECIMAL(10,4)) &amp;gt; &#39;20&#39;
   INNER JOIN wp_postmeta meta3 ON meta3.post_id = wp_posts.id
   AND meta3.meta_key = &#39;price_sales_USD&#39;
   AND CAST(meta3.meta_value AS DECIMAL(10,4)) &amp;gt; &#39;10&#39;
   INNER JOIN wp_postmeta meta4 ON meta4.post_id = wp_posts.id
   AND meta4.meta_key = &#39;price_standard_USD&#39;
   AND CAST(meta4.meta_value AS DECIMAL(10,4)) &amp;gt; &#39;5&#39;
   INNER JOIN wp_postmeta meta5 ON meta5.post_id = wp_posts.id
   AND meta5.meta_key = &#39;sysfield_brand&#39;
   AND CAST(meta5.meta_value AS CHAR) = &#39;Midori&#39;
   INNER JOIN wp_postmeta meta6 ON meta6.post_id = wp_posts.id
   AND meta6.meta_key = &#39;sysfield_manufacturer&#39;
   AND CAST(meta6.meta_value AS CHAR) = &#39;aaaaaaaaa&#39;
   INNER JOIN wp_postmeta meta7 ON meta7.post_id = wp_posts.id
   AND meta7.meta_key = &#39;udf_100000001&#39;
   AND CAST(meta7.meta_value AS CHAR) = &#39;肉身&#39;
   INNER JOIN wp_postmeta meta8 ON meta8.post_id = wp_posts.id
   AND meta8.meta_key = &#39;udf_100000004&#39;
   AND CAST(meta8.meta_value AS CHAR) = &#39;30&#39;
   WHERE 1=1
     AND (wp_posts.post_type = &#39;product&#39;)
     AND (wp_posts.post_status = &#39;publish&#39;
          OR wp_posts.post_status = &#39;private&#39;)
     AND wp_posts.post_title LIKE &#39;%s%&#39;
     AND (wp_posts.ID IN
            (SELECT object_id
             FROM wp_term_relationships
             WHERE term_taxonomy_id IN
                 (SELECT term_taxonomy_id
                  FROM wp_term_taxonomy
                  WHERE term_id IN (100000001))))
     AND wp_posts.post_date &amp;gt; &#39;2015-06-04 10:40:00&#39;) collection ON collection.ID = wp_posts.ID
INNER JOIN
  (SELECT DISTINCT wp_posts.ID
   FROM wp_posts
   INNER JOIN wp_postmeta meta0 ON meta0.post_id = wp_posts.id
   AND (meta0.meta_key = &#39;price_standard_min_RMB&#39;
        AND CAST(meta0.meta_value AS DECIMAL(10,4)) BETWEEN &#39;0&#39; AND &#39;0&#39;)
   INNER JOIN wp_postmeta meta1 ON meta1.post_id = wp_posts.id
   AND (meta1.meta_key = &#39;sysfield_manufacturer&#39;
        AND CAST(meta1.meta_value AS CHAR) = &#39;aaaaaaaaa&#39;)
   INNER JOIN wp_postmeta meta2 ON meta2.post_id = wp_posts.id
   AND (meta2.meta_key = &#39;sysfield_brand&#39;
        AND CAST(meta2.meta_value AS CHAR) = &#39;Midori&#39;)
   INNER JOIN wp_postmeta meta3 ON meta3.post_id = wp_posts.id
   AND (meta3.meta_key = &#39;sysfield_stamp&#39;
        AND CAST(meta3.meta_value AS CHAR) = &#39;sddd&#39;)
   INNER JOIN wp_postmeta meta4 ON meta4.post_id = wp_posts.id
   AND (meta4.meta_key = &#39;udf_100000001&#39;
        AND CAST(meta4.meta_value AS CHAR) IN (&#39;人肉&#39;,
                                               &#39;肉身&#39;,
                                               &#39;精神&#39;))
   INNER JOIN wp_postmeta meta5 ON meta5.post_id = wp_posts.id
   AND (meta5.meta_key = &#39;udf_100000002&#39;
        AND CAST(meta5.meta_value AS CHAR) IN (&#39;20&#39;,
                                               &#39;30&#39;,
                                               &#39;40&#39;))
   INNER JOIN wp_postmeta meta6 ON meta6.post_id = wp_posts.id
   AND (meta6.meta_key = &#39;udf_100000003&#39;
        AND CAST(meta6.meta_value AS CHAR) IN (&#39;10&#39;,
                                               &#39;20&#39;,
                                               &#39;30&#39;))
   INNER JOIN wp_postmeta meta7 ON meta7.post_id = wp_posts.id
   AND (meta7.meta_key = &#39;udf_100000004&#39;
        AND CAST(meta7.meta_value AS CHAR) IN (&#39;30&#39;,
                                               &#39;40&#39;,
                                               &#39;50&#39;))
   INNER JOIN wp_postmeta meta8 ON meta8.post_id = wp_posts.id
   AND (meta8.meta_key = &#39;variant_200000001&#39;
        AND CAST(meta8.meta_value AS CHAR) IN (&#39;200000001&#39;,
                                               &#39;200000002&#39;,
                                               &#39;200000003&#39;))
   INNER JOIN wp_postmeta meta9 ON meta9.post_id = wp_posts.id
   AND (meta9.meta_key = &#39;variant_200000002&#39;
        AND CAST(meta9.meta_value AS CHAR) = &#39;200000006&#39;)
   WHERE 1=1
     AND (wp_posts.post_type = &#39;product&#39;)) filter ON filter.ID = wp_posts.ID
WHERE 1=1
  AND wp_posts.post_type = &#39;product&#39;
  AND (wp_posts.post_status = &#39;publish&#39;
       OR wp_posts.post_status = &#39;private&#39;)
GROUP BY wp_posts.ID
ORDER BY post_date DESC LIMIT 0,
                              12
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;是不是庞大无比，的确这样的查询语句对MySQL来说过去庞大了，因为这个SQL关联次数过多了。
过多的join导致MySQL的查询优化器变得很慢并且往往优化后的结果很不理想。对于MySQL来说N个表的关联就是N的阶层个优化顺序，即MySQL要检查N的阶层个不同的表的顺序，寻找最优化的查询顺序。

通过设置profiling，然后通过** show profile for query xx**得到结果可以说明这一点：&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>高性能MySQL 读书摘要</title>
      <link>http://www.heguangnan.com/post/mysql-note/</link>
      <pubDate>Tue, 19 May 2015 10:45:07 +0800</pubDate>
      
      <guid>http://www.heguangnan.com/post/mysql-note/</guid>
      <description>&lt;h2 id=&#34;前言&#34;&gt;前言&lt;/h2&gt;

&lt;p&gt;因工作需要，要不断的使用MySQL，前段时间还参与了MySQL的性能测试，及profiling。发现MySQL还是非常有意思的，自己也非常感兴趣，于是买了本牛逼的书：《高性能MySQL 第三版》。书是很好，但是第一遍基本没什么感觉，基本上是粗略了解，很多细节还是掌握不好。现在重新学习希望能够有更好的提高。
读书摘要，既然是读书摘要就不会照搬原书，我会侧重点的做笔记，有意思的地方会多写，自己觉得不是很重要的东西会少写或者不写。但是内容的范围不会超出这本书。OK, Let&amp;rsquo;s Start。&lt;/p&gt;

&lt;h3 id=&#34;mysql逻辑结构&#34;&gt;MySQL逻辑结构&lt;/h3&gt;

&lt;p&gt;逻辑架构图如下：
&lt;img src=&#34;http://www.heguangnan.com/img/MySqlCapture.PNG&#34; alt=&#34;Mysql&#34; /&gt;
分为三层结构，需要重点研究的是存储引擎层和查询优化层。存储引擎也主要研究InnoDB。&lt;/p&gt;

&lt;h2 id=&#34;并发控制&#34;&gt;并发控制&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;读写锁： 在并发读写数据库表时使用，也叫共享锁和排他锁，读锁是共享的，是互不阻塞的，写锁是排他的，一个写锁会阻塞其他的读锁和写锁。&lt;/li&gt;
&lt;li&gt;锁粒度： 锁的数据越少，并发程度就越高，但锁的数量就会大增，锁的开销也会增加。这就需要一种平衡，即锁策略的选择。&lt;/li&gt;
&lt;li&gt;锁策略，包含&lt;strong&gt;表锁&lt;/strong&gt;和&lt;strong&gt;行级锁&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;死锁： 多个事务以不同的顺序锁定资源时，就会可能产生死锁。InnoDB能检测到死锁的循环依赖（&lt;strong&gt;how?&lt;/strong&gt;），对死锁的处理方法是回滚最少行级排它锁的事务。&lt;/li&gt;
&lt;li&gt;MVCC： 多版本并发控制，是行级锁的变种，在很多情况下避免的加锁操作。工作在REPEATABLE READ 和 REPEATABLE COMMITTED两个隔离级别下。&lt;/li&gt;
&lt;li&gt;事务日志： 提高事务效率的一种方法，也叫预写式日志。日志操作是磁盘上小块区域内的顺序I/O，不是随机I/O，会快很多。关于顺序和随机I/O，需要后面讨论下。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;如何检测死锁，在复杂系统里面是要重点考虑的，目前没有研究InnoDB的源码，不知道他是怎么判定死锁产生的。但是基于一般理论大致可以想一下它是怎么产生的，即多个线程加锁的顺序不一致，产生了循环依赖，基于此，可以设计一种数据结构，每个线程在试图加锁的时候就将该线程作为该锁的所有者，如果出现加锁失败，就要进行一次检测。每个锁的所有者里面是否有环，有环就说明有循环依赖，即可判定死锁，然后进行死锁解除。解除的策略估计会比较暴力，通过销毁某个死锁线程或者强制锁释放等等。&lt;a href=&#34;http://web.mit.edu/6.033/1997/reports/r03-ben.html&#34;&gt;这篇文章&lt;/a&gt;也有类似的讨论。&lt;/p&gt;

&lt;p&gt;InnoDB中的MVCC实现机制： 在每行记录保存两个隐藏的列，一个是行的创建时间，一个是行的过期时间或者是删除时间。时间使用系统版本号标示，每个事务都会有一个，且递增。在REAPTABLE READ隔离级别下MVCC操作如下：
+ SELECT 满足两个条件： InnoDB只查找版本号早于当前事务版本的数据行。行的删除版本要么没有定义要么大于当前事务的版本号。
+ INSERT InnoDB为没一行保存当前系统版本号作为行版本号。
+ DELETE InnoDB为删除的每一行保存当前的版本号为删除版本号。
+ UPDATE InnoDB为新插入的行，保存当前的版本号为行版本号，同时保存当前系统版本号到原来的行作为删除的行作为行删除标示。与单纯的悲观锁和乐观锁，MVCC读操作简单，性能好，能保证只会读到符合标准的行。&lt;/p&gt;

&lt;p&gt;MVCC工作在REAPTABLE READ 和 READ COMMIT两个隔离级别下。REAPTABLE READ 为可重复读，即同一个事务中多次读取同样的记录的结果是一致的。显然MVCC满足这点。READ COMMIT 提交读，一个事务开始时，只能更新到所有已提交事务的更改。即事务开始到提交前，所做的修改对其他事务都是不可见的。MVCC也天生支持。&lt;/p&gt;

&lt;h2 id=&#34;mysql基准测试&#34;&gt;MySQL基准测试&lt;/h2&gt;

&lt;p&gt;本章主要是说的针对MySQL的基准测试，这里重点看下&lt;strong&gt;sql-bench&lt;/strong&gt;和&lt;strong&gt;sysbench&lt;/strong&gt;。 其中&lt;strong&gt;sql-bench&lt;/strong&gt;只有在源码安装的时候才会有，二进制安装没有,&lt;strong&gt;sysbench&lt;/strong&gt;需要单独安装。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;sql-bench&lt;/strong&gt; 是由perl脚本组成的测试工具。&lt;strong&gt;sysbench&lt;/strong&gt;也可以不只是用来进行数据库的基准测试，比如CPU、I/O等。这些工具的使用咱不赘述，后续如有使用再更新到这里。&lt;/p&gt;

&lt;h2 id=&#34;服务器性能剖析&#34;&gt;服务器性能剖析&lt;/h2&gt;

&lt;p&gt;服务器性能剖析包含两个方面，一是应用程序，而是数据库；对应用程序剖析需要有相应的统计方法。例如PHP则需要统计每个方法的执行时间，执行数据库查询的时间，都可以在应用层获取；数据库上的性能剖析，就是分析并发查询时的性能问题。
针对PHP方面，目前正在开发性能剖析的脚本，保证能在生产环境上work。做完后会更新到这里。
数据库方面目前就使用了MySql的慢查询日志。慢查询日志的产生需要简单的配置：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;1.  find /etc -name my.cnf; it should be locate in: sudo vi /etc/mysql/my.cnf;
2.  add lines: under [mysqld]
slow-query-log = 1
slow-query-log-file = /var/log/mysql/localhost-slow.log
long_query_time = 1
log-queries-not-using-indexes
if the directory /var/log/mysql/ does not exist, you need use : mkdir –p /var/log/mysql/ to create it.
3.  restart your daemon: sudo service mysql restart .
I have tested these steps on my Ubuntu machine.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;令&lt;strong&gt;long_query_time = 0&lt;/strong&gt;可以获得所有的查询语句，上述配置对MariaDB也是适用的。&lt;/p&gt;

&lt;p&gt;获得的结果类似如下：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;35 # User@Host: debian-sys-maint[debian-sys-maint] @ localhost []
 36 # Query_time: 0.000169  Lock_time: 0.000075 Rows_sent: 0  Rows_examined: 1
 37 SET timestamp=1430214485;
 38 select count(*) into @discard from `information_schema`.`PROCESSLIST`;
 39 # User@Host: debian-sys-maint[debian-sys-maint] @ localhost []
 40 # Query_time: 0.000359  Lock_time: 0.000111 Rows_sent: 0  Rows_examined: 2
 41 SET timestamp=1430214485;
 42 select count(*) into @discard from `information_schema`.`ROUTINES`;
 43 # User@Host: debian-sys-maint[debian-sys-maint] @ localhost []
 44 # Query_time: 0.001736  Lock_time: 0.000090 Rows_sent: 0  Rows_examined: 0
 45 SET timestamp=1430214485;
 46 select count(*) into @discard from `information_schema`.`TRIGGERS`;
 47 # User@Host: debian-sys-maint[debian-sys-maint] @ localhost []
 48 # Query_time: 0.001403  Lock_time: 0.000080 Rows_sent: 0  Rows_examined: 4
 49 SET timestamp=1430214485;
 50 select count(*) into @discard from `information_schema`.`VIEWS`;
 51 # Time: 150428 17:49:08
 52 # User@Host: root[root] @ localhost []
 53 # Query_time: 0.144277  Lock_time: 0.000052 Rows_sent: 10061  Rows_examined: 10061
 54 use occ_eshop;
 55 SET timestamp=1430214548;
 56 select * from wp_posts;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;然后可以针对每一个查询进行分析，并剖析其性能问题。
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>WooCommerce variant product 表设计</title>
      <link>http://www.heguangnan.com/post/woocommerce-variant-product-%E8%A1%A8%E8%AE%BE%E8%AE%A1/</link>
      <pubDate>Wed, 13 May 2015 20:45:07 +0800</pubDate>
      
      <guid>http://www.heguangnan.com/post/woocommerce-variant-product-%E8%A1%A8%E8%AE%BE%E8%AE%A1/</guid>
      <description>随着功能越来越多，越来越复杂，如果数据库表设计的不好，就会遇到各种各样的问题。 目前已经发现数据表设计的非常不合理，导致出现了大量tricky的PHP代码。由于是在Wordpress平台上搭建的电商平台，免不了要借鉴下WooCommerce的表设计了。 WooCommerce是基于Wordpress的一个插件，也能实现快速开店。下面就来分析下WooCommerce中是如何存储和组织产品数据的。在产品数据中，variant product有事最为复杂的一种。比方一件衬衫，它的variant就包含Color和Size，现就以这个例子来分析下WooCommerce中的实现。对于WooCommerce中怎么添加variant product请参照这个链接。但有个主意点就是添加variant product前在Product下面的Attributes tab页里面添加系统级的variants。 首先添加两个attributes分别为Color和Size，添加完后会在wp_woocommerce_attribute_taxonomies出现以下数据：
   attribute_id attribute_name attribute_label attribute_type attribute_orderby attribute_public     4 color Color text id 0   5 size Size text id 0    
接下来去添加variant product，Color下面添加两个值：Red和Green，Size下面也增加两个值：Small和Large。添加完后会有几个表发生变化。首先，wp_terms会增加相应的variant value：
   term_id name slug term_group     15 Red red 0   16 Green green 0   17 Small small 0   18 Large large 0   19 variable variable 0     wp_term_taxonomy中新增：</description>
    </item>
    
    <item>
      <title>MYSQL的中文排序问题</title>
      <link>http://www.heguangnan.com/post/mysql%E7%9A%84%E4%B8%AD%E6%96%87%E6%8E%92%E5%BA%8F%E9%97%AE%E9%A2%98/</link>
      <pubDate>Tue, 12 May 2015 13:45:07 +0800</pubDate>
      
      <guid>http://www.heguangnan.com/post/mysql%E7%9A%84%E4%B8%AD%E6%96%87%E6%8E%92%E5%BA%8F%E9%97%AE%E9%A2%98/</guid>
      <description>&lt;p&gt;最近在做一个产品filter的功能，遇到一个问题需要对中文的label进行排序，开始以为在数据库层就应该可以轻松解决。但是发现在英文的时候排序是ok的，但是中文的时候结果就不再让人满意了。
例如：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;select distinct m.meta_value as value, m.meta_key as prefix from wp_postmeta m where m.meta_key like &#39;UDF::5&#39; order by CONVERT(value USING gb2312) COLLATE gb2312_chinese_ci;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;结果如下：&lt;/p&gt;

&lt;table id=&#34;table_results&#34; class=&#34;ajax pma_table&#34;&gt;&lt;thead&gt;&lt;tr&gt;&lt;th colspan=&#34;2&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/th&gt;&lt;/tr&gt;&lt;tr&gt;&lt;th class=&#34;draggable column_heading pointer marker&#34; data-column=&#34;value&#34;&gt;&lt;span&gt;&lt;a &gt;value&lt;input type=&#34;hidden&#34; value=&#34;&#34;&gt;&lt;/a&gt;&lt;/span&gt;&lt;/th&gt;&lt;th class=&#34;draggable column_heading pointer marker&#34; data-column=&#34;prefix&#34;&gt;&lt;span&gt;&lt;a &gt;prefix&lt;input type=&#34;hidden&#34; value=&#34;&#34;&gt;&lt;/a&gt;&lt;/span&gt;&lt;/th&gt;&lt;td&gt;&lt;span&gt;&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr class=&#34;odd&#34;&gt;&lt;td data-decimals=&#34;0&#34; data-type=&#34;blob&#34; class=&#34;right data      nowrap &#34;&gt;&lt;span&gt;二年级&lt;/span&gt;&lt;/td&gt;&lt;td data-decimals=&#34;0&#34; data-type=&#34;string&#34; class=&#34;right data      nowrap &#34;&gt;&lt;span&gt;UDF::5&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class=&#34;even&#34;&gt;&lt;td data-decimals=&#34;0&#34; data-type=&#34;blob&#34; class=&#34;right data      nowrap &#34;&gt;&lt;span&gt;三年级&lt;/span&gt;&lt;/td&gt;&lt;td data-decimals=&#34;0&#34; data-type=&#34;string&#34; class=&#34;right data      condition nowrap &#34;&gt;&lt;span&gt;UDF::5&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class=&#34;odd&#34;&gt;&lt;td data-decimals=&#34;0&#34; data-type=&#34;blob&#34; class=&#34;right data      nowrap &#34;&gt;&lt;span&gt;四年级&lt;/span&gt;&lt;/td&gt;&lt;td data-decimals=&#34;0&#34; data-type=&#34;string&#34; class=&#34;right data      condition nowrap &#34;&gt;&lt;span&gt;UDF::5&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class=&#34;even&#34;&gt;&lt;td data-decimals=&#34;0&#34; data-type=&#34;blob&#34; class=&#34;right data      nowrap &#34;&gt;&lt;span&gt;五年级&lt;/span&gt;&lt;/td&gt;&lt;td data-decimals=&#34;0&#34; data-type=&#34;string&#34; class=&#34;right data      condition nowrap &#34;&gt;&lt;span&gt;UDF::5&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class=&#34;odd&#34;&gt;&lt;td data-decimals=&#34;0&#34; data-type=&#34;blob&#34; class=&#34;right data      nowrap &#34;&gt;&lt;span&gt;学前&lt;/span&gt;&lt;/td&gt;&lt;td data-decimals=&#34;0&#34; data-type=&#34;string&#34; class=&#34;right data      condition nowrap &#34;&gt;&lt;span&gt;UDF::5&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class=&#34;even&#34;&gt;&lt;td data-decimals=&#34;0&#34; data-type=&#34;blob&#34; class=&#34;right data      nowrap &#34;&gt;&lt;span&gt;一年级&lt;/span&gt;&lt;/td&gt;&lt;td data-decimals=&#34;0&#34; data-type=&#34;string&#34; class=&#34;right data      condition nowrap &#34;&gt;&lt;span&gt;UDF::5&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class=&#34;odd&#34;&gt;&lt;td data-decimals=&#34;0&#34; data-type=&#34;blob&#34; class=&#34;right data      nowrap &#34;&gt;&lt;span&gt;婴幼儿&lt;/span&gt;&lt;/td&gt;&lt;td data-decimals=&#34;0&#34; data-type=&#34;string&#34; class=&#34;right data      condition nowrap &#34;&gt;&lt;span&gt;UDF::5&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class=&#34;even&#34;&gt;&lt;td data-decimals=&#34;0&#34; data-type=&#34;blob&#34; class=&#34;right data      nowrap &#34;&gt;&lt;span&gt;幼儿园&lt;/span&gt;&lt;/td&gt;&lt;td data-decimals=&#34;0&#34; data-type=&#34;string&#34; class=&#34;right data      condition nowrap &#34;&gt;&lt;span&gt;UDF::5&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
  

&lt;p&gt;上面就是按照中文排序的结果，排序的标准就是按照中文的拼音排序，但是排序的结果还是符合正常的逻辑。
进一步可以看下排序的标准是什么：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;select distinct m.meta_value as value, m.meta_key as prefix, CONVERT(meta_value USING gb2312) COLLATE gb2312_chinese_ci as base from wp_postmeta m where m.meta_key like &#39;UDF::5&#39; order by CONVERT(value USING gb2312) COLLATE gb2312_chinese_ci;
&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    
  </channel>
</rss>