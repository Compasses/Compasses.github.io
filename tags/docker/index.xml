<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Docker on 三十重围</title>
    <link>http://www.heguangnan.com/tags/docker/</link>
    <description>Recent content in Docker on 三十重围</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-EN</language>
    <managingEditor>gnhe2009@gmail.com (Jet He)</managingEditor>
    <webMaster>gnhe2009@gmail.com (Jet He)</webMaster>
    <copyright>(c) 2015 Jet He.</copyright>
    <lastBuildDate>Mon, 15 Aug 2016 13:57:02 +0800</lastBuildDate>
    <atom:link href="http://www.heguangnan.com/tags/docker/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>kubernetes start</title>
      <link>http://www.heguangnan.com/2016/08/15/kubernetes-start/</link>
      <pubDate>Mon, 15 Aug 2016 13:57:02 +0800</pubDate>
      <author>gnhe2009@gmail.com (Jet He)</author>
      <guid>http://www.heguangnan.com/2016/08/15/kubernetes-start/</guid>
      <description>

&lt;p&gt;先从几个概念理解开始：&lt;/p&gt;

&lt;h2 id=&#34;pods-http-kubernetes-io-docs-user-guide-pods:091cda0b59885368668b194756b39d27&#34;&gt;&lt;a href=&#34;http://kubernetes.io/docs/user-guide/pods/&#34;&gt;Pods&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;是一个container的集合，针对特定应用服务的建模，一个或者多个容器分布于相同的物理主机或者虚拟主机。位于相同pod的应用是共享存储的。容器位于相同的pod，共享IP address 和端口空间。类推到docker上，就是pod定义了一组containers。跟单个container部署类似，pods的生命周期也是跟随宿主node的。&lt;/p&gt;

&lt;p&gt;pod建模于多个相互合作的进程，整体表现为一个内聚的service。pod作为部署的独立单位，支持水平扩张，复制等，共享各种相互依赖的资源。使用pods会有诸多好处：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;透明化，pod中的容器在基础框架中变得可见，为提供各种服务提供了便利。&lt;/li&gt;
&lt;li&gt;解耦，pod中的容器可以被重新构建和升级。&lt;/li&gt;
&lt;li&gt;容易使用。&lt;/li&gt;
&lt;li&gt;高性能，基础框架会统一处理容器的管理。
Pod的生命周期，通常情况下，用户不需要直接去创建pod，应该只有通过controllers RC来创建。&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;rs-rc:091cda0b59885368668b194756b39d27&#34;&gt;RS &amp;amp; RC&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://kubernetes.io/docs/user-guide/replicasets/&#34;&gt;Replica Sets&lt;/a&gt; 和 &lt;a href=&#34;http://kubernetes.io/docs/user-guide/replication-controller/&#34;&gt;Replication Controller&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Replica Sets 是 Replication Controller的升级概念，共同的使命都是管理pod，让他们高可用。名字上也透漏了这一点，复制集。但是着两种东西基本都不会用，建议使用其更上层的deployment。这里还是看你的服务是通过什么方式部署的，是否通过deployment。&lt;/p&gt;

&lt;h2 id=&#34;deployment-http-kubernetes-io-docs-user-guide-deployments:091cda0b59885368668b194756b39d27&#34;&gt;&lt;a href=&#34;http://kubernetes.io/docs/user-guide/deployments/&#34;&gt;Deployment&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;一个Deployment提供了更新Pod和Replica Set的机制。通过Deployment可以创建新的resource和替换已有的resource。
常用的方法，更新deployment中的image，让其开始做rolling-update。deployment 是在实际使用中使用较多的API。&lt;/p&gt;

&lt;h2 id=&#34;services-http-kubernetes-io-docs-user-guide-services:091cda0b59885368668b194756b39d27&#34;&gt;&lt;a href=&#34;http://kubernetes.io/docs/user-guide/services/&#34;&gt;Services&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;k8s中的service是构建在Pods之上的逻辑概念。打通Pods之间的通信。service正好建模于微服务。对于Service的endpoints对应于Pods，pods通过selector 确定。&lt;/p&gt;

&lt;h2 id=&#34;resource-management-http-kubernetes-io-docs-user-guide-managing-deployments-in-place-updates-of-resources:091cda0b59885368668b194756b39d27&#34;&gt;&lt;a href=&#34;http://kubernetes.io/docs/user-guide/managing-deployments/#in-place-updates-of-resources&#34;&gt;Resource management&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;k8s的强大之处在于管理集群中的资源，提供了方便的接口。升级、回滚等等。链接中的命令通过kubectrl提供，可以多多操作练习。&lt;/p&gt;

&lt;h2 id=&#34;volumes-http-kubernetes-io-docs-user-guide-volumes:091cda0b59885368668b194756b39d27&#34;&gt;&lt;a href=&#34;http://kubernetes.io/docs/user-guide/volumes/&#34;&gt;Volumes&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;volumes提供了一种持久化数据的功能，能够跨pods使用。有很多类型的volume可用。&lt;/p&gt;

&lt;p&gt;还有其他非常有用的概念：&lt;a href=&#34;http://kubernetes.io/docs/user-guide/namespaces/&#34;&gt;Namespaces&lt;/a&gt;，&lt;a href=&#34;http://kubernetes.io/docs/user-guide/jobs/&#34;&gt;Job&lt;/a&gt;。&lt;/p&gt;

&lt;h2 id=&#34;实用操作:091cda0b59885368668b194756b39d27&#34;&gt;实用操作&lt;/h2&gt;

&lt;p&gt;下面总结下平常使用较多的kubectl命令；
先看配置:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;➜  ~ cat ~/.kube/config
apiVersion: v1
clusters:
- cluster:
    server: http://10.58.80.171:8080
  name: demo
- cluster:
    server: 10.58.117.209:8080
  name: dmz
- cluster:
    server: http://10.58.113.74:8080
  name: hypercd
- cluster:
    server: 10.58.113.114:8080
  name: u
contexts:
- context:
    cluster: demo
    user: &amp;quot;&amp;quot;
  name: demo
- context:
    cluster: dmz
    user: &amp;quot;&amp;quot;
  name: dmz
- context:
    cluster: hypercd
    user: &amp;quot;&amp;quot;
  name: hypercd
- context:
    cluster: u
    user: &amp;quot;&amp;quot;
  name: u
current-context: u
kind: Config
preferences: {}
users: []
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;针对哪个cluster操作就更换当前的context：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;kubectl config use-context dmz
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;对于工作在多个cluster上的服务操作，这种方式还是比较便利的。
如何更新某个pod，例如修改了代码需要验证，不用重新部署整个cluster，只需要更新需要验证的服务即可：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;kubectl edit deployment/crm --namespace=aw
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;namespace是用来指定namespace，edit 会打开crm 的deployment yaml 文件。修改就是拿到你的提交的image 的id，更新下image id即可。例如：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;containers:
        image: hyper.cd/occ/bff-web:b2c232c8e088aa1d3b3320b5e4c99782e6f85b79
        imagePullPolicy: IfNotPresent
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;修改后，pods随后会被更新到最新的deployment对应的image。
k8s有UI可用的，如何拿到UI信息？可通过cluster-info获得：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;➜  ~ kubectl cluster-info               
Kubernetes master is running at 10.58.117.209:8080
KubeDNS is running at 10.58.117.209:8080/api/v1/proxy/namespaces/kube-system/services/kube-dns
kubernetes-dashboard is running at 10.58.117.209:8080/api/v1/proxy/namespaces/kube-system/services/kubernetes-dashboard
grafana is running at 10.58.117.209:8080/api/v1/proxy/namespaces/kube-system/services/monitoring-grafana

To further debug and diagnose cluster problems, use &#39;kubectl cluster-info dump&#39;.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;kubernetes-dashboard 便是cluster的web前端。web前端可以做各种操作，也能看到cluster的资源利用率。&lt;/p&gt;

&lt;p&gt;describe也是个比较有用的命令，在做rolling-update的时候，可以看到具体的升级信息。&lt;/p&gt;

&lt;p&gt;获取deployment的yaml文件：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;kubectl get deployment/bff-web -o yaml --namespace=jq
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;可以进行修改重新deploy。&lt;/p&gt;

&lt;p&gt;k8s作为一个开源的应用容器管理平台，已经得到了广泛的应用。看k8s的代码会是一个艰辛过程，代码量实在大，打算从kubectl入手。
kubectl 的编译只需单独编译即可，cd到src/k8s.io/kubernetes/cmd/kubectl，直接运行&lt;strong&gt;go build&lt;/strong&gt;编译即可。就会在当前目录下生成kubectl可执行文件。cmd目录下的都可以这样build。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Docker Docker</title>
      <link>http://www.heguangnan.com/2015/06/19/docker-docker/</link>
      <pubDate>Fri, 19 Jun 2015 17:45:07 +0800</pubDate>
      <author>gnhe2009@gmail.com (Jet He)</author>
      <guid>http://www.heguangnan.com/2015/06/19/docker-docker/</guid>
      <description>&lt;p&gt;一直想把本地的开发环境切换到docker上，由于公司的CI出来的运行环境是docker的，所以把本地开发环境打造成docker的应该也很简单了。&lt;/p&gt;

&lt;p&gt;首先安装虚拟机，使用Vmplayer，下载Ubuntu的安装镜像文件，安装会非常简单。接下来就是docker的安装，docker安装依照&lt;a href=&#34;https://docs.docker.com/installation/ubuntulinux/&#34;&gt;官网&lt;/a&gt;即可&lt;/p&gt;

&lt;p&gt;公司的镜像是基于Ubuntu+wordpress+Apache，MySQL在宿主机上。运行container的时候带上相应的参数，这里主要是端口映射，将docker里面的80端口映射到宿主机上的某一个端口例如7080，最后运行起来类似这个样子：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;CONTAINER ID        IMAGE               COMMAND                CREATED             STATUS              PORTS                                                               NAMES
ff1ad6f22e91        eshop_612:latest    &amp;quot;/var/eshop/install/   31 hours ago        Up 31 hours         0.0.0.0:7022-&amp;gt;22/tcp, 0.0.0.0:7080-&amp;gt;80/tcp, 0.0.0.0:7443-&amp;gt;443/tcp   eshop_instance_7080  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;开始遇到一个问题就是这个端口的映射问题，起来后外部访问时还是用的宿主机的Apache，后续停掉宿主机的Apache，目的是干掉80监听端口，在docker里面增加proxy。后面就一路畅通了。&lt;/p&gt;

&lt;p&gt;修改源码如何更新到docker里面是个麻烦的事情，如果有个外挂文件目录的功能就好了，现在只能是修改后的代码传到docker里面。其实传代码也很简单，相比以前编写C++代码，先把本地代码传到Linux服务器上进行编译，编译完再传到运行的服务器上，已经简单多了。现在做的只是把修改后的代码通过filezilla传到docker里面，然后浏览器访问就ok了。&lt;/p&gt;

&lt;p&gt;dokcer的开发环境相对于本地的开发环境速度上有个质的飞跃，由于本地是XAMPP的，然后在windows上。很显然web的开发环境更适宜运行在docker里面了。&lt;/p&gt;

&lt;p&gt;当然还有个非常大的优点，你可以运行任意多个container，每个container里面的code版本可以不一样啊，尤其在多版本并行开发的时候，带来的开发体验是本地不能有的。&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>