<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Mysql on 三十重围</title>
    <link>http://www.heguangnan.com/topics/mysql/</link>
    <description>Recent content in Mysql on 三十重围</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-EN</language>
    <managingEditor>gnhe2009@gmail.com (Jet He)</managingEditor>
    <webMaster>gnhe2009@gmail.com (Jet He)</webMaster>
    <copyright>(c) 2015 Jet He.</copyright>
    <lastBuildDate>Fri, 26 Jun 2015 15:45:07 +0800</lastBuildDate>
    <atom:link href="http://www.heguangnan.com/topics/mysql/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>deadlock of mysql</title>
      <link>http://www.heguangnan.com/2015/06/26/deadlock-of-mysql/</link>
      <pubDate>Fri, 26 Jun 2015 15:45:07 +0800</pubDate>
      <author>gnhe2009@gmail.com (Jet He)</author>
      <guid>http://www.heguangnan.com/2015/06/26/deadlock-of-mysql/</guid>
      <description>&lt;p&gt;没有想到在看似简单的场景里面也能遇到mysql的deadlock。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[Thu Jun 25 05:18:40.589897 2015] [:error] [pid 737] [client 172.17.42.1:41290] WordPress database error Deadlock found when trying to get lock; try restarting transaction for query UPDATE `wp_usermeta` SET `meta_value` = &#39;a:2:{s:64:\\&amp;quot;1161a6271c528045db428cc8698bbc8e3e26ad4fb9d7436e32cbbe01a00079d0\\&amp;quot;;i:1436419120;s:64:\\&amp;quot;bf2e3582e17c7dfa1e6b02c700f537b8095f2b31ef58e4b448939eb9406e11f7\\&amp;quot;;i:1435382320;}&#39; WHERE `user_id` = 188 AND `meta_key` = &#39;session_tokens&#39; made by require(&#39;wp-blog-header.php&#39;), require_once(&#39;wp-includes/template-loader.php&#39;), do_action(&#39;template_redirect&#39;), call_user_func_array, anw_template_redirect, ANW_Base_Controller-&amp;gt;process, call_user_func, ANW_AccountOnePage_Controller-&amp;gt;authenticate, wp_signon, wp_set_auth_cookie, WP_Session_Tokens-&amp;gt;create, WP_Session_Tokens-&amp;gt;update, WP_User_Meta_Session_Tokens-&amp;gt;update_session, WP_User_Meta_Session_Tokens-&amp;gt;update_sessions, update_user_meta, update_metadata
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这是wordpress本身的缺陷导致的，死锁的场景也是不复杂。即session_tokens的更新机制所致。
Session_tokens的更新是随着用户的login和 logout 更新的。Login时会增加session_tokens, 在不同的 浏览器 login会增加新的 tokens，在 logout时会删除这个 tokens。
这个死锁用户有两个 session，场景可能就是不同的浏览器同时做 login或者 logout，或者一个 login另一个 logout。看这个环境上有大量的用户存在，并且每个用户至多有两个 session，也只有跑性能脚本会有这个问题。现实情况比较难复现。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;                /**
                * Update a user&#39;s sessions in the usermeta table.
                *
                * @since 4.0.0
                * @access protected
                *
                * @param array $sessions Sessions.
                */
                protected function update_sessions( $sessions ) {
                                if ( ! has_filter( &#39;attach_session_information&#39; ) ) {
                                                $sessions = wp_list_pluck( $sessions, &#39;expiration&#39; );
                                }

                                if ( $sessions ) {
                                                update_user_meta( $this-&amp;gt;user_id, &#39;session_tokens&#39;, $sessions );
                                } else {
                                                delete_user_meta( $this-&amp;gt;user_id, &#39;session_tokens&#39; );
                                }
                }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;看到这里应该要在仔细深入了解下mysql的加锁机制，当然这个会比较复杂，也不能一蹴而就。整体上重新熟悉下。
事务的隔离级别有四种，分别是READ UNCOMMITTED、READ COMMITTED、REPEATABLE READ、SERIALIZEABLE。mysql默认的是可重复读。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;MariaDB [(none)]&amp;gt; show global variables like &#39;%isolation%&#39;;
+---------------+-----------------+
| Variable_name | Value           |
+---------------+-----------------+
| tx_isolation  | REPEATABLE-READ |
+---------------+-----------------+
1 row in set (0.00 sec)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;INNODB支持所有的事务隔离级别，但是MVCC只在REPEATABLE READ 和READ COMMITTED两个隔离级别下工作。
回到开始的问题。session_tokens 是真对用户在不同的终端上登录时进行更新的，value是个array，如上代码所示。如果同一个用户在两个终端上，可以是不同的浏览器即可，就会有不同的session_tokens，在登录登出的时候就会update改用户的数据，即同一行数据就可能产生死锁。这里必须是同时有两个事务。
现实中同一个用户在两个终端同时操作的可能性不大，但是也很难说。这也说明了wordpress的代码不够健壮吧。当然这里的死锁也并不可怕，INNODB会将持有最少行级排它锁的事务进行回滚。锁机制的了解还是要多多实践，网上也有较好的&lt;a href=&#34;http://hedengcheng.com/?p=771&#34;&gt;文章参考&lt;/a&gt;。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>straight_join when and why</title>
      <link>http://www.heguangnan.com/2015/05/19/straight_join-when-and-why/</link>
      <pubDate>Tue, 19 May 2015 10:45:07 +0800</pubDate>
      <author>gnhe2009@gmail.com (Jet He)</author>
      <guid>http://www.heguangnan.com/2015/05/19/straight_join-when-and-why/</guid>
      <description>

&lt;h3 id=&#34;问题过程&#34;&gt;问题过程&lt;/h3&gt;

&lt;p&gt;最近优化了一个查询语句，使用到了straight_join这个查询提示，现对其做下总结。
先看下这个查询语句：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;SELECT wp_posts.ID
FROM wp_posts
INNER JOIN wp_postmeta ON (wp_posts.ID = wp_postmeta.post_id)
INNER JOIN
  (SELECT
   STRAIGHT_JOIN DISTINCT wp_posts.ID
   FROM wp_posts
   INNER JOIN wp_postmeta meta0 ON meta0.post_id = wp_posts.id
   AND meta0.meta_key = &#39;sysfield_code&#39;
   AND CAST(meta0.meta_value AS CHAR) LIKE &#39;%s%&#39;
   INNER JOIN wp_postmeta meta1 ON meta1.post_id = wp_posts.id
   AND meta1.meta_key = &#39;price_sales_RMB&#39;
   AND CAST(meta1.meta_value AS DECIMAL(10,4)) &amp;gt; &#39;20&#39;
   INNER JOIN wp_postmeta meta2 ON meta2.post_id = wp_posts.id
   AND meta2.meta_key = &#39;price_standard_RMB&#39;
   AND CAST(meta2.meta_value AS DECIMAL(10,4)) &amp;gt; &#39;20&#39;
   INNER JOIN wp_postmeta meta3 ON meta3.post_id = wp_posts.id
   AND meta3.meta_key = &#39;price_sales_USD&#39;
   AND CAST(meta3.meta_value AS DECIMAL(10,4)) &amp;gt; &#39;10&#39;
   INNER JOIN wp_postmeta meta4 ON meta4.post_id = wp_posts.id
   AND meta4.meta_key = &#39;price_standard_USD&#39;
   AND CAST(meta4.meta_value AS DECIMAL(10,4)) &amp;gt; &#39;5&#39;
   INNER JOIN wp_postmeta meta5 ON meta5.post_id = wp_posts.id
   AND meta5.meta_key = &#39;sysfield_brand&#39;
   AND CAST(meta5.meta_value AS CHAR) = &#39;Midori&#39;
   INNER JOIN wp_postmeta meta6 ON meta6.post_id = wp_posts.id
   AND meta6.meta_key = &#39;sysfield_manufacturer&#39;
   AND CAST(meta6.meta_value AS CHAR) = &#39;aaaaaaaaa&#39;
   INNER JOIN wp_postmeta meta7 ON meta7.post_id = wp_posts.id
   AND meta7.meta_key = &#39;udf_100000001&#39;
   AND CAST(meta7.meta_value AS CHAR) = &#39;肉身&#39;
   INNER JOIN wp_postmeta meta8 ON meta8.post_id = wp_posts.id
   AND meta8.meta_key = &#39;udf_100000004&#39;
   AND CAST(meta8.meta_value AS CHAR) = &#39;30&#39;
   WHERE 1=1
     AND (wp_posts.post_type = &#39;product&#39;)
     AND (wp_posts.post_status = &#39;publish&#39;
          OR wp_posts.post_status = &#39;private&#39;)
     AND wp_posts.post_title LIKE &#39;%s%&#39;
     AND (wp_posts.ID IN
            (SELECT object_id
             FROM wp_term_relationships
             WHERE term_taxonomy_id IN
                 (SELECT term_taxonomy_id
                  FROM wp_term_taxonomy
                  WHERE term_id IN (100000001))))
     AND wp_posts.post_date &amp;gt; &#39;2015-06-04 10:40:00&#39;) collection ON collection.ID = wp_posts.ID
INNER JOIN
  (SELECT DISTINCT wp_posts.ID
   FROM wp_posts
   INNER JOIN wp_postmeta meta0 ON meta0.post_id = wp_posts.id
   AND (meta0.meta_key = &#39;price_standard_min_RMB&#39;
        AND CAST(meta0.meta_value AS DECIMAL(10,4)) BETWEEN &#39;0&#39; AND &#39;0&#39;)
   INNER JOIN wp_postmeta meta1 ON meta1.post_id = wp_posts.id
   AND (meta1.meta_key = &#39;sysfield_manufacturer&#39;
        AND CAST(meta1.meta_value AS CHAR) = &#39;aaaaaaaaa&#39;)
   INNER JOIN wp_postmeta meta2 ON meta2.post_id = wp_posts.id
   AND (meta2.meta_key = &#39;sysfield_brand&#39;
        AND CAST(meta2.meta_value AS CHAR) = &#39;Midori&#39;)
   INNER JOIN wp_postmeta meta3 ON meta3.post_id = wp_posts.id
   AND (meta3.meta_key = &#39;sysfield_stamp&#39;
        AND CAST(meta3.meta_value AS CHAR) = &#39;sddd&#39;)
   INNER JOIN wp_postmeta meta4 ON meta4.post_id = wp_posts.id
   AND (meta4.meta_key = &#39;udf_100000001&#39;
        AND CAST(meta4.meta_value AS CHAR) IN (&#39;人肉&#39;,
                                               &#39;肉身&#39;,
                                               &#39;精神&#39;))
   INNER JOIN wp_postmeta meta5 ON meta5.post_id = wp_posts.id
   AND (meta5.meta_key = &#39;udf_100000002&#39;
        AND CAST(meta5.meta_value AS CHAR) IN (&#39;20&#39;,
                                               &#39;30&#39;,
                                               &#39;40&#39;))
   INNER JOIN wp_postmeta meta6 ON meta6.post_id = wp_posts.id
   AND (meta6.meta_key = &#39;udf_100000003&#39;
        AND CAST(meta6.meta_value AS CHAR) IN (&#39;10&#39;,
                                               &#39;20&#39;,
                                               &#39;30&#39;))
   INNER JOIN wp_postmeta meta7 ON meta7.post_id = wp_posts.id
   AND (meta7.meta_key = &#39;udf_100000004&#39;
        AND CAST(meta7.meta_value AS CHAR) IN (&#39;30&#39;,
                                               &#39;40&#39;,
                                               &#39;50&#39;))
   INNER JOIN wp_postmeta meta8 ON meta8.post_id = wp_posts.id
   AND (meta8.meta_key = &#39;variant_200000001&#39;
        AND CAST(meta8.meta_value AS CHAR) IN (&#39;200000001&#39;,
                                               &#39;200000002&#39;,
                                               &#39;200000003&#39;))
   INNER JOIN wp_postmeta meta9 ON meta9.post_id = wp_posts.id
   AND (meta9.meta_key = &#39;variant_200000002&#39;
        AND CAST(meta9.meta_value AS CHAR) = &#39;200000006&#39;)
   WHERE 1=1
     AND (wp_posts.post_type = &#39;product&#39;)) filter ON filter.ID = wp_posts.ID
WHERE 1=1
  AND wp_posts.post_type = &#39;product&#39;
  AND (wp_posts.post_status = &#39;publish&#39;
       OR wp_posts.post_status = &#39;private&#39;)
GROUP BY wp_posts.ID
ORDER BY post_date DESC LIMIT 0,
                              12
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;是不是庞大无比，的确这样的查询语句对MySQL来说过去庞大了，因为这个SQL关联次数过多了。
过多的join导致MySQL的查询优化器变得很慢并且往往优化后的结果很不理想。对于MySQL来说N个表的关联就是N的阶层个优化顺序，即MySQL要检查N的阶层个不同的表的顺序，寻找最优化的查询顺序。&lt;/p&gt;

&lt;p&gt;通过设置profiling，然后通过** show profile for query xx**得到结果可以说明这一点：&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Status&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;Duration&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;starting&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;0.000441&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;checking permissions&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;0.000009&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;checking permissions&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;0.000004&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;checking permissions&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;0.000004&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;checking permissions&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;0.000010&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;checking permissions&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;0.000004&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;checking permissions&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;0.000004&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;checking permissions&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;0.000003&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;checking permissions&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;0.000003&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;checking permissions&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;0.000003&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;checking permissions&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;0.000004&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;checking permissions&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;0.000003&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;checking permissions&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;0.000004&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;checking permissions&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;0.000004&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;checking permissions&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;0.000003&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;checking permissions&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;0.000008&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Opening tables&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;0.000732&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;init&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;0.000073&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;System lock&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;0.000030&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;optimizing&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;0.000007&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;optimizing&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;0.000188&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;font color=&#39;red&#39;&gt;&lt;strong&gt;statistics&lt;/strong&gt; &lt;/font&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;0.628449&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;preparing&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;0.000047&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Creating tmp table&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;0.000075&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;statistics&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;0.000060&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;preparing&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;0.000014&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Creating tmp table&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;0.000050&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Sorting result&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;0.000005&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;executing&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;0.000008&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Sending data&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;0.000022&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;executing&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;0.000002&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Sending data&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;0.000238&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;removing tmp table&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;0.000004&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Sending data&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;0.000073&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Creating sort index&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;0.000010&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;end&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;0.000001&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;removing tmp table&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;0.000002&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;end&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;0.000002&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;query end&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;0.000004&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;closing tables&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;0.000002&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;removing tmp table&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;0.000010&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;closing tables&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;0.000015&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;freeing items&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;0.000046&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;cleaning up&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;0.000088&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;可以看到statistics所占用的时间是非常巨大的这也是这个查询非常慢的根本原因。
statistics就是说明MySQL的查询优化器在不断的向存储引擎索取统计信息以寻找最优化的查询顺序。
可以通过explain extended 的方法获取最终的执行计划。虽然执行计划已经是最优的了，但是中间的过程代价太高了。
这里就使用straight_join的优化提示来优化这个查询。由一开始的600多ms降低为十几ms了。&lt;/p&gt;

&lt;h3 id=&#34;总结&#34;&gt;总结&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;大的SQL语句，这里主要说的是join次数过多的sql，需要进行查询优化。&lt;/li&gt;
&lt;li&gt;尽量不要有大的SQL，大SQL对MySQL来说还是有些力不从心。&lt;/li&gt;
&lt;li&gt;straight_join 禁止了MySQL的查询优化，但是可能随着数据集的变化会有新的性能问题。因此straight_join 不能说是最终的优化方案。&lt;/li&gt;
&lt;li&gt;根据《高性能MySQL》书上的说法，分解大的查询语句能更好的利用MySQL的缓存机制，对优化大的SQL查询是首先。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;所以后续查询分解是不可避免的。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>高性能MySQL 读书摘要</title>
      <link>http://www.heguangnan.com/2015/05/19/%E9%AB%98%E6%80%A7%E8%83%BDmysql-%E8%AF%BB%E4%B9%A6%E6%91%98%E8%A6%81/</link>
      <pubDate>Tue, 19 May 2015 10:45:07 +0800</pubDate>
      <author>gnhe2009@gmail.com (Jet He)</author>
      <guid>http://www.heguangnan.com/2015/05/19/%E9%AB%98%E6%80%A7%E8%83%BDmysql-%E8%AF%BB%E4%B9%A6%E6%91%98%E8%A6%81/</guid>
      <description>

&lt;h2 id=&#34;前言:9e70b3f53d84350226052075ce54e259&#34;&gt;前言&lt;/h2&gt;

&lt;p&gt;因工作需要，要不断的使用MySQL，前段时间还参与了MySQL的性能测试，及profiling。发现MySQL还是非常有意思的，自己也非常感兴趣，于是买了本牛逼的书：《高性能MySQL 第三版》。书是很好，但是第一遍基本没什么感觉，基本上是粗略了解，很多细节还是掌握不好。现在重新学习希望能够有更好的提高。
读书摘要，既然是读书摘要就不会照搬原书，我会侧重点的做笔记，有意思的地方会多写，自己觉得不是很重要的东西会少写或者不写。但是内容的范围不会超出这本书。OK, Let&amp;rsquo;s Start。&lt;/p&gt;

&lt;h3 id=&#34;mysql逻辑结构:9e70b3f53d84350226052075ce54e259&#34;&gt;MySQL逻辑结构&lt;/h3&gt;

&lt;p&gt;逻辑架构图如下：
&lt;img src=&#34;http://www.heguangnan.com/img/MySqlCapture.PNG&#34; alt=&#34;Mysql&#34; /&gt;
分为三层结构，需要重点研究的是存储引擎层和查询优化层。存储引擎也主要研究InnoDB。&lt;/p&gt;

&lt;h2 id=&#34;并发控制:9e70b3f53d84350226052075ce54e259&#34;&gt;并发控制&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;读写锁： 在并发读写数据库表时使用，也叫共享锁和排他锁，读锁是共享的，是互不阻塞的，写锁是排他的，一个写锁会阻塞其他的读锁和写锁。&lt;/li&gt;
&lt;li&gt;锁粒度： 锁的数据越少，并发程度就越高，但锁的数量就会大增，锁的开销也会增加。这就需要一种平衡，即锁策略的选择。&lt;/li&gt;
&lt;li&gt;锁策略，包含&lt;strong&gt;表锁&lt;/strong&gt;和&lt;strong&gt;行级锁&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;死锁： 多个事务以不同的顺序锁定资源时，就会可能产生死锁。InnoDB能检测到死锁的循环依赖（&lt;strong&gt;how?&lt;/strong&gt;），对死锁的处理方法是回滚最少行级排它锁的事务。&lt;/li&gt;
&lt;li&gt;MVCC： 多版本并发控制，是行级锁的变种，在很多情况下避免的加锁操作。工作在REPEATABLE READ 和 REPEATABLE COMMITTED两个隔离级别下。&lt;/li&gt;
&lt;li&gt;事务日志： 提高事务效率的一种方法，也叫预写式日志。日志操作是磁盘上小块区域内的顺序I/O，不是随机I/O，会快很多。关于顺序和随机I/O，需要后面讨论下。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;如何检测死锁，在复杂系统里面是要重点考虑的，目前没有研究InnoDB的源码，不知道他是怎么判定死锁产生的。但是基于一般理论大致可以想一下它是怎么产生的，即多个线程加锁的顺序不一致，产生了循环依赖，基于此，可以设计一种数据结构，每个线程在试图加锁的时候就将该线程作为该锁的所有者，如果出现加锁失败，就要进行一次检测。每个锁的所有者里面是否有环，有环就说明有循环依赖，即可判定死锁，然后进行死锁解除。解除的策略估计会比较暴力，通过销毁某个死锁线程或者强制锁释放等等。&lt;a href=&#34;http://web.mit.edu/6.033/1997/reports/r03-ben.html&#34;&gt;这篇文章&lt;/a&gt;也有类似的讨论。&lt;/p&gt;

&lt;p&gt;InnoDB中的MVCC实现机制： 在每行记录保存两个隐藏的列，一个是行的创建时间，一个是行的过期时间或者是删除时间。时间使用系统版本号标示，每个事务都会有一个，且递增。在REAPTABLE READ隔离级别下MVCC操作如下：
+ SELECT 满足两个条件： InnoDB只查找版本号早于当前事务版本的数据行。行的删除版本要么没有定义要么大于当前事务的版本号。
+ INSERT InnoDB为没一行保存当前系统版本号作为行版本号。
+ DELETE InnoDB为删除的每一行保存当前的版本号为删除版本号。
+ UPDATE InnoDB为新插入的行，保存当前的版本号为行版本号，同时保存当前系统版本号到原来的行作为删除的行作为行删除标示。与单纯的悲观锁和乐观锁，MVCC读操作简单，性能好，能保证只会读到符合标准的行。&lt;/p&gt;

&lt;p&gt;MVCC工作在REAPTABLE READ 和 READ COMMIT两个隔离级别下。REAPTABLE READ 为可重复读，即同一个事务中多次读取同样的记录的结果是一致的。显然MVCC满足这点。READ COMMIT 提交读，一个事务开始时，只能更新到所有已提交事务的更改。即事务开始到提交前，所做的修改对其他事务都是不可见的。MVCC也天生支持。&lt;/p&gt;

&lt;h2 id=&#34;mysql基准测试:9e70b3f53d84350226052075ce54e259&#34;&gt;MySQL基准测试&lt;/h2&gt;

&lt;p&gt;本章主要是说的针对MySQL的基准测试，这里重点看下&lt;strong&gt;sql-bench&lt;/strong&gt;和&lt;strong&gt;sysbench&lt;/strong&gt;。 其中&lt;strong&gt;sql-bench&lt;/strong&gt;只有在源码安装的时候才会有，二进制安装没有,&lt;strong&gt;sysbench&lt;/strong&gt;需要单独安装。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;sql-bench&lt;/strong&gt; 是由perl脚本组成的测试工具。&lt;strong&gt;sysbench&lt;/strong&gt;也可以不只是用来进行数据库的基准测试，比如CPU、I/O等。这些工具的使用咱不赘述，后续如有使用再更新到这里。&lt;/p&gt;

&lt;h2 id=&#34;服务器性能剖析:9e70b3f53d84350226052075ce54e259&#34;&gt;服务器性能剖析&lt;/h2&gt;

&lt;p&gt;服务器性能剖析包含两个方面，一是应用程序，而是数据库；对应用程序剖析需要有相应的统计方法。例如PHP则需要统计每个方法的执行时间，执行数据库查询的时间，都可以在应用层获取；数据库上的性能剖析，就是分析并发查询时的性能问题。
针对PHP方面，目前正在开发性能剖析的脚本，保证能在生产环境上work。做完后会更新到这里。
数据库方面目前就使用了MySql的慢查询日志。慢查询日志的产生需要简单的配置：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;1.  find /etc -name my.cnf; it should be locate in: sudo vi /etc/mysql/my.cnf;
2.  add lines: under [mysqld]
slow-query-log = 1
slow-query-log-file = /var/log/mysql/localhost-slow.log
long_query_time = 1
log-queries-not-using-indexes
if the directory /var/log/mysql/ does not exist, you need use : mkdir –p /var/log/mysql/ to create it.
3.  restart your daemon: sudo service mysql restart .
I have tested these steps on my Ubuntu machine.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;令&lt;strong&gt;long_query_time = 0&lt;/strong&gt;可以获得所有的查询语句，上述配置对MariaDB也是适用的。&lt;/p&gt;

&lt;p&gt;获得的结果类似如下：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;35 # User@Host: debian-sys-maint[debian-sys-maint] @ localhost []
 36 # Query_time: 0.000169  Lock_time: 0.000075 Rows_sent: 0  Rows_examined: 1
 37 SET timestamp=1430214485;
 38 select count(*) into @discard from `information_schema`.`PROCESSLIST`;
 39 # User@Host: debian-sys-maint[debian-sys-maint] @ localhost []
 40 # Query_time: 0.000359  Lock_time: 0.000111 Rows_sent: 0  Rows_examined: 2
 41 SET timestamp=1430214485;
 42 select count(*) into @discard from `information_schema`.`ROUTINES`;
 43 # User@Host: debian-sys-maint[debian-sys-maint] @ localhost []
 44 # Query_time: 0.001736  Lock_time: 0.000090 Rows_sent: 0  Rows_examined: 0
 45 SET timestamp=1430214485;
 46 select count(*) into @discard from `information_schema`.`TRIGGERS`;
 47 # User@Host: debian-sys-maint[debian-sys-maint] @ localhost []
 48 # Query_time: 0.001403  Lock_time: 0.000080 Rows_sent: 0  Rows_examined: 4
 49 SET timestamp=1430214485;
 50 select count(*) into @discard from `information_schema`.`VIEWS`;
 51 # Time: 150428 17:49:08
 52 # User@Host: root[root] @ localhost []
 53 # Query_time: 0.144277  Lock_time: 0.000052 Rows_sent: 10061  Rows_examined: 10061
 54 use occ_eshop;
 55 SET timestamp=1430214548;
 56 select * from wp_posts;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;然后可以针对每一个查询进行分析，并剖析其性能问题。&lt;/p&gt;

&lt;h2 id=&#34;schema与数据类型优化:9e70b3f53d84350226052075ce54e259&#34;&gt;Schema与数据类型优化&lt;/h2&gt;

&lt;p&gt;待续&lt;/p&gt;

&lt;h2 id=&#34;创建高性能的索引:9e70b3f53d84350226052075ce54e259&#34;&gt;创建高性能的索引&lt;/h2&gt;

&lt;p&gt;待续&lt;/p&gt;

&lt;h2 id=&#34;查询性能优化:9e70b3f53d84350226052075ce54e259&#34;&gt;查询性能优化&lt;/h2&gt;

&lt;p&gt;一个复杂查询还是多个简单查询：
切分查询：将大查询切分成小查询。每个查询功能完全一样。
分解关联查询：分解关联查询的方式重构查询有如下的优势：1，让缓存效率更高。2，查询分解后，执行单个查询可以减少锁的竞争。3.在应用层做关联，可以更容易对数据库进行拆分。更容易做到高性能和可扩展。4，减少冗余记录的查询。5.这样做相当于在应用中实现了哈希关联，而不是使用MYSQL的嵌套循环关联。某些场景哈希关联的效率高很多。
mysql客户端和服务器之间的通信协议是半双工的。show full processlist; 显示当前链接线程的状态。
将一个SQL转成一个执行计划，包含多个子阶段：解析SQL、预处理、优化SQL执行计划。
mysql通过关键字将SQL语句进行解析；生成一颗对应的解析树。预处理器根据一些mysql规则进一步检查解析树是否合法。
查询优化器：一条查询有很多种执行方式，并能都返回相同的结果。有很多原因导致MYSQL优化器选择错误的执行计划。1.统计信息不准确；2.执行计划中的成本估算不等同于实际的执行成本。。。。。优化策略可以简单的分为两种，一种是静态优化，一种动态优化。
MYSQL的优化类型：1.重新定义关联表的顺序。2.将外连接转化成内连接。3.使用等价变换规则，移除一些恒等成立和恒不成立的判断。4.优化COUNT MIN和MAX，得益于B-Tree结构。5.预估并转化为常数表达式6.覆盖索引扫描。7.子查询优化。8.提前终止查询。9.等值传播10.列表IN()的比较。使用IN的时候索引就用不了了。
MYSQL的概念中，每个查询都是一次关联。所以读取结果临时表也是一次关联。MYSQL执行关联的策略：MYSQL对任何关联都执行嵌套循环关联操作。即先在一个表中循环取出单条数据，然后再嵌套循环到下一个表中寻找匹配的行，依次下去，直到找到所有表中匹配的行。如果最后一个关联表无法找到更多的行后，MYSQL返回上一层关联表，看是否能够找到更多的匹配记录。
分别看一个内联和外联的例子：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;select tb1.col1, tbl2.col2 from tb1 inner join tbl2 using(col3) where tb1.col1 in (5,6);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;伪代码：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;outer_iter = iterator over tb1 where col1 in (5, 6)
outer_row = outer_iter.next
while outer_row
     inner_iter = iterator over tbl2 where col3 = outer_row.col3
     inner_row = inner_iter.next
     while inner_row
          output [outer_row.col1 inner_row.col2]
          inner_row = inner_iter.next
     end
     outer_row = outer_iter.next
end
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;select tb1.col1, tbl2.col2 from tb1 left outer join tbl2 using(col3) where tb1.col1 in (5,6);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;伪代码：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;outer_iter = iterator over tb1 where col1 in (5, 6)
outer_row = outer_iter.next
while outer_row
     inner_iter = iterator over tbl2 where col3 = outer_row.col3
     inner_row = inner_iter.next
     if inner_row
          while inner_row
               output [outer_row.col1 inner_row.col2]
               inner_row = inner_iter.next
          end
     else 
          out [outer_row.col1, null]
     end
     outer_row = outer_iter.next
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;如果超过n个表的关联，那么需要检查n的阶乘中关联顺序；当需要关联的表超过optimizer_search&lt;em&gt;depth时，优化器就会使用贪婪搜索模式。show variables like &amp;lsquo;optimizer&lt;/em&gt;%&amp;lsquo;;
排序优化：应尽可能避免排序或者尽可能避免对大量数据进行排序。
查询执行引擎，mysql根据查询计划完成整个查询。在执行过程中，有大量的操作需要通过调用存储引擎实现的接口来完成，这些接口为 handler API，查询中的每一个表由一个handler实例表示。&lt;/p&gt;

&lt;p&gt;MySQL 查询优化的局限性
1. 关联子查询：where条件里面包含IN()的子查询。通常建议使用EXISTS()等效的改写查询获取更好的效率。对任何查询应该通过测试来验证猜想。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;UNION的限制，mysql无法将限制条件从外层下推到内层，使得原本能够限制部分返回结果的条件无法应用到内层查询的优化上。因此UNION的两个子查询分别加上一个LIMIT 来减少临时表中的数据。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;待续&lt;/p&gt;

&lt;h2 id=&#34;参考文献:9e70b3f53d84350226052075ce54e259&#34;&gt;参考文献&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;《高性能MySQL 第三版》&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
    <item>
      <title>WooCommerce variant product 表设计</title>
      <link>http://www.heguangnan.com/2015/05/13/woocommerce-variant-product-%E8%A1%A8%E8%AE%BE%E8%AE%A1/</link>
      <pubDate>Wed, 13 May 2015 20:45:07 +0800</pubDate>
      <author>gnhe2009@gmail.com (Jet He)</author>
      <guid>http://www.heguangnan.com/2015/05/13/woocommerce-variant-product-%E8%A1%A8%E8%AE%BE%E8%AE%A1/</guid>
      <description>&lt;p&gt;随着功能越来越多，越来越复杂，如果数据库表设计的不好，就会遇到各种各样的问题。
目前已经发现数据表设计的非常不合理，导致出现了大量tricky的PHP代码。由于是在Wordpress平台上搭建的电商平台，免不了要借鉴下&lt;a href=&#34;http://docs.woothemes.com/documentation/plugins/woocommerce/&#34;&gt;WooCommerce&lt;/a&gt;的表设计了。
WooCommerce是基于Wordpress的一个插件，也能实现快速开店。下面就来分析下WooCommerce中是如何存储和组织产品数据的。在产品数据中，variant product有事最为复杂的一种。比方一件衬衫，它的variant就包含Color和Size，现就以这个例子来分析下WooCommerce中的实现。对于WooCommerce中怎么添加variant product请参照&lt;a href=&#34;http://docs.woothemes.com/document/variable-product/&#34;&gt;这个链接&lt;/a&gt;。但有个主意点就是添加variant product前在Product下面的Attributes tab页里面添加系统级的variants。
首先添加两个attributes分别为Color和Size，添加完后会在wp_woocommerce_attribute_taxonomies出现以下数据：&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;attribute_id&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;attribute_name&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;attribute_label&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;attribute_type&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;attribute_orderby&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;attribute_public&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;color&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Color&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;text&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;id&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;5&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;size&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Size&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;text&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;id&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;&lt;br\&gt;&lt;/p&gt;

&lt;p&gt;接下来去添加variant product，Color下面添加两个值：Red和Green，Size下面也增加两个值：Small和Large。添加完后会有几个表发生变化。首先，wp_terms会增加相应的variant value：&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;term_id&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;name&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;slug&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;term_group&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;15&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Red&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;red&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;16&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Green&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;green&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;17&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Small&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;small&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;18&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Large&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;large&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;19&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;variable&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;variable&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;&lt;br\&gt;
wp_term_taxonomy中新增：&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;term_taxonomy_id&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;term_id&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;taxonomy&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;description&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;parent&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;count&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;15&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;15&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;pa_color&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;16&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;16&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;pa_color&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;17&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;17&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;pa_size&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;18&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;18&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;pa_size&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;19&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;19&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;product_type&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;&lt;br\&gt;
  其对应的term meta储存在wp_woocommerce_termmeta表中：&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;meta_id&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;woocommerce_term_id&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;meta_key&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;meta_value&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;10&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;15&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;order_pa_color&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;11&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;16&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;order_pa_color&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;12&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;17&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;order_pa_size&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;13&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;18&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;order_pa_size&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;&lt;br\&gt;
现在看主表，因为创建产品的时候选择&amp;rsquo;Link all variations&amp;rsquo;，因此会产生4个SKU，post表会5条数据，但他们是自关联的，使用查询:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; select id, post_title, post_name, post_type, post_parent from wp_posts;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;得到结果如下：&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;id&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;post_title&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;post_name&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;post_type&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;post_parent&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;20&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;variant product&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;variant-product&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;product&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;21&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Variation #21 of variant product&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;product-20-variation&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;product_variation&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;20&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;22&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Variation #22 of variant product&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;product-20-variation-2&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;product_variation&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;20&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;23&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Variation #23 of variant product&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;product-20-variation-3&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;product_variation&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;20&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;24&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Variation #24 of variant product&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;product-20-variation-4&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;product_variation&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;20&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;&lt;br\&gt;
该主表对应的纵表即是这些属性的描述，产品在meta表里面存储了所有的属性序列化数组，例如id为20的是个产品，其在post_meta表中key为‘ _product_attributes’的值为所有属性描述的列表：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;array (size=2)
  &#39;pa_color&#39; =&amp;gt; 
    array (size=6)
      &#39;name&#39; =&amp;gt; string &#39;pa_color&#39; (length=8)
      &#39;value&#39; =&amp;gt; string &#39;&#39; (length=0)
      &#39;position&#39; =&amp;gt; string &#39;0&#39; (length=1)
      &#39;is_visible&#39; =&amp;gt; int 1
      &#39;is_variation&#39; =&amp;gt; int 1
      &#39;is_taxonomy&#39; =&amp;gt; int 1
  &#39;pa_size&#39; =&amp;gt; 
    array (size=6)
      &#39;name&#39; =&amp;gt; string &#39;pa_size&#39; (length=7)
      &#39;value&#39; =&amp;gt; string &#39;&#39; (length=0)
      &#39;position&#39; =&amp;gt; string &#39;1&#39; (length=1)
      &#39;is_visible&#39; =&amp;gt; int 1
      &#39;is_variation&#39; =&amp;gt; int 1
      &#39;is_taxonomy&#39; =&amp;gt; int 1
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;即可以从产品表里面获取所有的variant值，当然需要关联上述的几个表。再如SKU的id为21的post_meta数据如下：例如SKU的id为21的post_meta数据如下：&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;meta_id&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;post_id&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;meta_key&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;meta_value&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;295&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;21&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;attribute_pa_color&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;red&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;296&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;21&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;attribute_pa_size&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;small&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;326&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;21&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;_sku&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;327&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;21&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;_thumbnail_id&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;328&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;21&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;_virtual&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;no&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;329&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;21&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;_downloadable&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;no&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;330&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;21&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;_weight&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;331&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;21&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;_length&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;332&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;21&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;_width&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;333&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;21&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;_height&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;334&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;21&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;_manage_stock&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;no&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;335&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;21&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;_stock_status&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;instock&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;336&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;21&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;_regular_price&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;56&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;337&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;21&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;_sale_price&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;338&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;21&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;_sale_price_dates_from&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;339&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;21&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;_sale_price_dates_to&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;340&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;21&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;_price&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;56&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;341&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;21&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;_download_limit&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;342&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;21&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;_download_expiry&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;343&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;21&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;_downloadable_files&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;通过这些表的相互关联即可完整描述所有的产品。&lt;/p&gt;

&lt;p&gt;上面分析完了WooCommerce对variant product表处理，但是实际的应用也不能完全照搬。其中产品数据表里面的default_attributs就不能满足我们的需求，需要重新加一张表做映射查询。具体就不再细说了。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>MYSQL的中文排序问题</title>
      <link>http://www.heguangnan.com/2015/05/12/mysql%E7%9A%84%E4%B8%AD%E6%96%87%E6%8E%92%E5%BA%8F%E9%97%AE%E9%A2%98/</link>
      <pubDate>Tue, 12 May 2015 13:45:07 +0800</pubDate>
      <author>gnhe2009@gmail.com (Jet He)</author>
      <guid>http://www.heguangnan.com/2015/05/12/mysql%E7%9A%84%E4%B8%AD%E6%96%87%E6%8E%92%E5%BA%8F%E9%97%AE%E9%A2%98/</guid>
      <description>&lt;p&gt;最近在做一个产品filter的功能，遇到一个问题需要对中文的label进行排序，开始以为在数据库层就应该可以轻松解决。但是发现在英文的时候排序是ok的，但是中文的时候结果就不再让人满意了。
例如：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;select distinct m.meta_value as value, m.meta_key as prefix from wp_postmeta m where m.meta_key like &#39;UDF::5&#39; order by CONVERT(value USING gb2312) COLLATE gb2312_chinese_ci;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;结果如下：&lt;/p&gt;

&lt;table id=&#34;table_results&#34; class=&#34;ajax pma_table&#34;&gt;&lt;thead&gt;&lt;tr&gt;&lt;th colspan=&#34;2&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/th&gt;&lt;/tr&gt;&lt;tr&gt;&lt;th class=&#34;draggable column_heading pointer marker&#34; data-column=&#34;value&#34;&gt;&lt;span&gt;&lt;a &gt;value&lt;input type=&#34;hidden&#34; value=&#34;&#34;&gt;&lt;/a&gt;&lt;/span&gt;&lt;/th&gt;&lt;th class=&#34;draggable column_heading pointer marker&#34; data-column=&#34;prefix&#34;&gt;&lt;span&gt;&lt;a &gt;prefix&lt;input type=&#34;hidden&#34; value=&#34;&#34;&gt;&lt;/a&gt;&lt;/span&gt;&lt;/th&gt;&lt;td&gt;&lt;span&gt;&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr class=&#34;odd&#34;&gt;&lt;td data-decimals=&#34;0&#34; data-type=&#34;blob&#34; class=&#34;right data      nowrap &#34;&gt;&lt;span&gt;二年级&lt;/span&gt;&lt;/td&gt;&lt;td data-decimals=&#34;0&#34; data-type=&#34;string&#34; class=&#34;right data      nowrap &#34;&gt;&lt;span&gt;UDF::5&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class=&#34;even&#34;&gt;&lt;td data-decimals=&#34;0&#34; data-type=&#34;blob&#34; class=&#34;right data      nowrap &#34;&gt;&lt;span&gt;三年级&lt;/span&gt;&lt;/td&gt;&lt;td data-decimals=&#34;0&#34; data-type=&#34;string&#34; class=&#34;right data      condition nowrap &#34;&gt;&lt;span&gt;UDF::5&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class=&#34;odd&#34;&gt;&lt;td data-decimals=&#34;0&#34; data-type=&#34;blob&#34; class=&#34;right data      nowrap &#34;&gt;&lt;span&gt;四年级&lt;/span&gt;&lt;/td&gt;&lt;td data-decimals=&#34;0&#34; data-type=&#34;string&#34; class=&#34;right data      condition nowrap &#34;&gt;&lt;span&gt;UDF::5&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class=&#34;even&#34;&gt;&lt;td data-decimals=&#34;0&#34; data-type=&#34;blob&#34; class=&#34;right data      nowrap &#34;&gt;&lt;span&gt;五年级&lt;/span&gt;&lt;/td&gt;&lt;td data-decimals=&#34;0&#34; data-type=&#34;string&#34; class=&#34;right data      condition nowrap &#34;&gt;&lt;span&gt;UDF::5&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class=&#34;odd&#34;&gt;&lt;td data-decimals=&#34;0&#34; data-type=&#34;blob&#34; class=&#34;right data      nowrap &#34;&gt;&lt;span&gt;学前&lt;/span&gt;&lt;/td&gt;&lt;td data-decimals=&#34;0&#34; data-type=&#34;string&#34; class=&#34;right data      condition nowrap &#34;&gt;&lt;span&gt;UDF::5&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class=&#34;even&#34;&gt;&lt;td data-decimals=&#34;0&#34; data-type=&#34;blob&#34; class=&#34;right data      nowrap &#34;&gt;&lt;span&gt;一年级&lt;/span&gt;&lt;/td&gt;&lt;td data-decimals=&#34;0&#34; data-type=&#34;string&#34; class=&#34;right data      condition nowrap &#34;&gt;&lt;span&gt;UDF::5&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class=&#34;odd&#34;&gt;&lt;td data-decimals=&#34;0&#34; data-type=&#34;blob&#34; class=&#34;right data      nowrap &#34;&gt;&lt;span&gt;婴幼儿&lt;/span&gt;&lt;/td&gt;&lt;td data-decimals=&#34;0&#34; data-type=&#34;string&#34; class=&#34;right data      condition nowrap &#34;&gt;&lt;span&gt;UDF::5&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class=&#34;even&#34;&gt;&lt;td data-decimals=&#34;0&#34; data-type=&#34;blob&#34; class=&#34;right data      nowrap &#34;&gt;&lt;span&gt;幼儿园&lt;/span&gt;&lt;/td&gt;&lt;td data-decimals=&#34;0&#34; data-type=&#34;string&#34; class=&#34;right data      condition nowrap &#34;&gt;&lt;span&gt;UDF::5&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
  

&lt;p&gt;上面就是按照中文排序的结果，排序的标准就是按照中文的拼音排序，但是排序的结果还是符合正常的逻辑。
进一步可以看下排序的标准是什么：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;select distinct m.meta_value as value, m.meta_key as prefix, CONVERT(meta_value USING gb2312) COLLATE gb2312_chinese_ci as base from wp_postmeta m where m.meta_key like &#39;UDF::5&#39; order by CONVERT(value USING gb2312) COLLATE gb2312_chinese_ci;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;结果如下：&lt;/p&gt;

&lt;table id=&#34;table_results&#34; class=&#34;ajax pma_table&#34;&gt;&lt;thead&gt;&lt;tr&gt;&lt;th colspan=&#34;3&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/th&gt;&lt;/tr&gt;&lt;tr&gt;&lt;th class=&#34;draggable column_heading pointer marker&#34; data-column=&#34;value&#34; style=&#34;cursor: inherit;&#34;&gt;&lt;span&gt;&lt;a&gt;value&lt;input type=&#34;hidden&#34; value=&#34;&#34;&gt;&lt;/a&gt;&lt;/span&gt;&lt;/th&gt;&lt;th class=&#34;draggable column_heading pointer marker&#34; data-column=&#34;prefix&#34; style=&#34;cursor: inherit;&#34;&gt;&lt;span&gt;&lt;a &gt;prefix&lt;input type=&#34;hidden&#34; value=&#34;&#34;&gt;&lt;/a&gt;&lt;/span&gt;&lt;/th&gt;&lt;th class=&#34;draggable column_heading pointer marker&#34; data-column=&#34;base&#34; style=&#34;cursor: inherit;&#34;&gt;&lt;span&gt;&lt;a&gt;base&lt;input type=&#34;hidden&#34; value=&#34;&#34;&gt;&lt;/a&gt;&lt;/span&gt;&lt;/th&gt;&lt;td&gt;&lt;span&gt;&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr class=&#34;odd&#34;&gt;&lt;td data-decimals=&#34;0&#34; data-type=&#34;blob&#34; class=&#34;right datanowrap&#34;&gt;&lt;span&gt;二年级&lt;/span&gt;&lt;/td&gt;&lt;td data-decimals=&#34;0&#34; data-type=&#34;string&#34; class=&#34;right datanowrap&#34;&gt;&lt;span&gt;UDF::5&lt;/span&gt;&lt;/td&gt;&lt;td data-decimals=&#34;0&#34; data-type=&#34;blob&#34; class=&#34;right datanowrap&#34;&gt;&lt;span&gt;二年级&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class=&#34;even&#34;&gt;&lt;td data-decimals=&#34;0&#34; data-type=&#34;blob&#34; class=&#34;right datanowrap&#34;&gt;&lt;span&gt;三年级&lt;/span&gt;&lt;/td&gt;&lt;td data-decimals=&#34;0&#34; data-type=&#34;string&#34; class=&#34;right datacondition nowrap&#34;&gt;&lt;span&gt;UDF::5&lt;/span&gt;&lt;/td&gt;&lt;td data-decimals=&#34;0&#34; data-type=&#34;blob&#34; class=&#34;right datanowrap&#34;&gt;&lt;span&gt;三年级&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class=&#34;odd&#34;&gt;&lt;td data-decimals=&#34;0&#34; data-type=&#34;blob&#34; class=&#34;right datanowrap&#34;&gt;&lt;span&gt;四年级&lt;/span&gt;&lt;/td&gt;&lt;td data-decimals=&#34;0&#34; data-type=&#34;string&#34; class=&#34;right datacondition nowrap&#34;&gt;&lt;span&gt;UDF::5&lt;/span&gt;&lt;/td&gt;&lt;td data-decimals=&#34;0&#34; data-type=&#34;blob&#34; class=&#34;right datanowrap&#34;&gt;&lt;span&gt;四年级&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class=&#34;even&#34;&gt;&lt;td data-decimals=&#34;0&#34; data-type=&#34;blob&#34; class=&#34;right datanowrap&#34;&gt;&lt;span&gt;五年级&lt;/span&gt;&lt;/td&gt;&lt;td data-decimals=&#34;0&#34; data-type=&#34;string&#34; class=&#34;right datacondition nowrap&#34;&gt;&lt;span&gt;UDF::5&lt;/span&gt;&lt;/td&gt;&lt;td data-decimals=&#34;0&#34; data-type=&#34;blob&#34; class=&#34;right datanowrap&#34;&gt;&lt;span&gt;五年级&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class=&#34;odd&#34;&gt;&lt;td data-decimals=&#34;0&#34; data-type=&#34;blob&#34; class=&#34;right datanowrap&#34;&gt;&lt;span&gt;学前&lt;/span&gt;&lt;/td&gt;&lt;td data-decimals=&#34;0&#34; data-type=&#34;string&#34; class=&#34;right datacondition nowrap&#34;&gt;&lt;span&gt;UDF::5&lt;/span&gt;&lt;/td&gt;&lt;td data-decimals=&#34;0&#34; data-type=&#34;blob&#34; class=&#34;right datanowrap&#34;&gt;&lt;span&gt;学前&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class=&#34;even&#34;&gt;&lt;td data-decimals=&#34;0&#34; data-type=&#34;blob&#34; class=&#34;right datanowrap&#34;&gt;&lt;span&gt;一年级&lt;/span&gt;&lt;/td&gt;&lt;td data-decimals=&#34;0&#34; data-type=&#34;string&#34; class=&#34;right datacondition nowrap&#34;&gt;&lt;span&gt;UDF::5&lt;/span&gt;&lt;/td&gt;&lt;td data-decimals=&#34;0&#34; data-type=&#34;blob&#34; class=&#34;right datanowrap&#34;&gt;&lt;span&gt;一年级&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class=&#34;odd&#34;&gt;&lt;td data-decimals=&#34;0&#34; data-type=&#34;blob&#34; class=&#34;right datanowrap&#34;&gt;&lt;span&gt;婴幼儿&lt;/span&gt;&lt;/td&gt;&lt;td data-decimals=&#34;0&#34; data-type=&#34;string&#34; class=&#34;right datacondition nowrap&#34;&gt;&lt;span&gt;UDF::5&lt;/span&gt;&lt;/td&gt;&lt;td data-decimals=&#34;0&#34; data-type=&#34;blob&#34; class=&#34;right datanowrap&#34;&gt;&lt;span&gt;婴幼儿&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class=&#34;even&#34;&gt;&lt;td data-decimals=&#34;0&#34; data-type=&#34;blob&#34; class=&#34;right datanowrap&#34;&gt;&lt;span&gt;幼儿园&lt;/span&gt;&lt;/td&gt;&lt;td data-decimals=&#34;0&#34; data-type=&#34;string&#34; class=&#34;right datacondition nowrap&#34;&gt;&lt;span&gt;UDF::5&lt;/span&gt;&lt;/td&gt;&lt;td data-decimals=&#34;0&#34; data-type=&#34;blob&#34; class=&#34;right datanowrap&#34;&gt;&lt;span&gt;幼儿园&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;

&lt;p&gt;可以看出排序的标准为拼音的首字母。
网上也有说可以使用中文笔画进行排序：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;order by CAST(CONVERT(`value` using big5) AS BINARY);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;结果：&lt;/p&gt;

&lt;table id=&#34;table_results&#34; class=&#34;ajax pma_table&#34;&gt;&lt;thead&gt;&lt;tr&gt;&lt;th colspan=&#34;3&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/th&gt;&lt;/tr&gt;&lt;tr&gt;&lt;th class=&#34;draggable column_heading pointer marker&#34; data-column=&#34;value&#34; style=&#34;cursor: inherit;&#34;&gt;&lt;span&gt;&lt;a &gt;value&lt;input type=&#34;hidden&#34; value=&#34;&#34;&gt;&lt;/a&gt;&lt;/span&gt;&lt;/th&gt;&lt;th class=&#34;draggable column_heading pointer marker&#34; data-column=&#34;prefix&#34;&gt;&lt;span&gt;&lt;a &gt;prefix&lt;input type=&#34;hidden&#34; value=&#34;&#34;&gt;&lt;/a&gt;&lt;/span&gt;&lt;/th&gt;&lt;th class=&#34;draggable column_heading pointer marker&#34; data-column=&#34;base&#34;&gt;&lt;span&gt;&lt;a &gt;base&lt;input type=&#34;hidden&#34; value=&#34;&#34;&gt;&lt;/a&gt;&lt;/span&gt;&lt;/th&gt;&lt;td&gt;&lt;span&gt;&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr class=&#34;odd&#34;&gt;&lt;td data-decimals=&#34;0&#34; data-type=&#34;blob&#34; class=&#34;right data      nowrap&#34;&gt;&lt;span&gt;婴幼儿&lt;/span&gt;&lt;/td&gt;&lt;td data-decimals=&#34;0&#34; data-type=&#34;string&#34; class=&#34;right data      nowrap &#34;&gt;&lt;span&gt;UDF::5&lt;/span&gt;&lt;/td&gt;&lt;td data-decimals=&#34;0&#34; data-type=&#34;blob&#34; class=&#34;right data      nowrap &#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class=&#34;even&#34;&gt;&lt;td data-decimals=&#34;0&#34; data-type=&#34;blob&#34; class=&#34;right data      nowrap&#34;&gt;&lt;span&gt;学前&lt;/span&gt;&lt;/td&gt;&lt;td data-decimals=&#34;0&#34; data-type=&#34;string&#34; class=&#34;right data      condition nowrap &#34;&gt;&lt;span&gt;UDF::5&lt;/span&gt;&lt;/td&gt;&lt;td data-decimals=&#34;0&#34; data-type=&#34;blob&#34; class=&#34;right data      nowrap &#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class=&#34;odd&#34;&gt;&lt;td data-decimals=&#34;0&#34; data-type=&#34;blob&#34; class=&#34;right data      nowrap&#34;&gt;&lt;span&gt;一年级&lt;/span&gt;&lt;/td&gt;&lt;td data-decimals=&#34;0&#34; data-type=&#34;string&#34; class=&#34;right data      condition nowrap &#34;&gt;&lt;span&gt;UDF::5&lt;/span&gt;&lt;/td&gt;&lt;td data-decimals=&#34;0&#34; data-type=&#34;blob&#34; class=&#34;right data      nowrap &#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class=&#34;even&#34;&gt;&lt;td data-decimals=&#34;0&#34; data-type=&#34;blob&#34; class=&#34;right data      nowrap&#34;&gt;&lt;span&gt;二年级&lt;/span&gt;&lt;/td&gt;&lt;td data-decimals=&#34;0&#34; data-type=&#34;string&#34; class=&#34;right data      condition nowrap &#34;&gt;&lt;span&gt;UDF::5&lt;/span&gt;&lt;/td&gt;&lt;td data-decimals=&#34;0&#34; data-type=&#34;blob&#34; class=&#34;right data      nowrap &#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class=&#34;odd&#34;&gt;&lt;td data-decimals=&#34;0&#34; data-type=&#34;blob&#34; class=&#34;right data      nowrap&#34;&gt;&lt;span&gt;三年级&lt;/span&gt;&lt;/td&gt;&lt;td data-decimals=&#34;0&#34; data-type=&#34;string&#34; class=&#34;right data      condition nowrap &#34;&gt;&lt;span&gt;UDF::5&lt;/span&gt;&lt;/td&gt;&lt;td data-decimals=&#34;0&#34; data-type=&#34;blob&#34; class=&#34;right data      nowrap &#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class=&#34;even&#34;&gt;&lt;td data-decimals=&#34;0&#34; data-type=&#34;blob&#34; class=&#34;right data      nowrap&#34;&gt;&lt;span&gt;五年级&lt;/span&gt;&lt;/td&gt;&lt;td data-decimals=&#34;0&#34; data-type=&#34;string&#34; class=&#34;right data      condition nowrap &#34;&gt;&lt;span&gt;UDF::5&lt;/span&gt;&lt;/td&gt;&lt;td data-decimals=&#34;0&#34; data-type=&#34;blob&#34; class=&#34;right data      nowrap &#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class=&#34;odd&#34;&gt;&lt;td data-decimals=&#34;0&#34; data-type=&#34;blob&#34; class=&#34;right data      nowrap&#34;&gt;&lt;span&gt;四年级&lt;/span&gt;&lt;/td&gt;&lt;td data-decimals=&#34;0&#34; data-type=&#34;string&#34; class=&#34;right data      condition nowrap &#34;&gt;&lt;span&gt;UDF::5&lt;/span&gt;&lt;/td&gt;&lt;td data-decimals=&#34;0&#34; data-type=&#34;blob&#34; class=&#34;right data      nowrap &#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class=&#34;even&#34;&gt;&lt;td data-decimals=&#34;0&#34; data-type=&#34;blob&#34; class=&#34;right data      nowrap&#34;&gt;&lt;span&gt;幼儿园&lt;/span&gt;&lt;/td&gt;&lt;td data-decimals=&#34;0&#34; data-type=&#34;string&#34; class=&#34;right data      condition nowrap &#34;&gt;&lt;span&gt;UDF::5&lt;/span&gt;&lt;/td&gt;&lt;td data-decimals=&#34;0&#34; data-type=&#34;blob&#34; class=&#34;right data      nowrap &#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;

&lt;p&gt;但此时的排序标准却是NULL的，也就是说其排序的标准是无法确定的。&lt;/p&gt;

&lt;p&gt;不过回头想一下让Mysql能完好的支持中文排序根本是不可能的，就在上面的例子就可以看出，单靠Mysql的order by 是解决不了的了。那问题还是要解决的，最终的解决方案是将这些value语义化，在前端渲染的时候进行手动排序，幸好TWIG能支持中文字符。当然这也只是个workaround。最终的解决方案还要回归问题本身。这样的排序显然是有意义的，也就是在人的理解基础上进行的排序。SQL是无法理解的，最后也只能由人来解决，即在创建数据源头处规定好次序，这就需要增加一个列表示sequence，或单独增加一个order表，这都是可行，看具体业务场景了。&lt;/p&gt;

&lt;p&gt;问题虽然简单，但是说明了一个道理：原生方法解决不了原生问题，就要从源头上重新考虑问题的解决方案。&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>